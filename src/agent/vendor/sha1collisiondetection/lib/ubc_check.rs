#![allow(dead_code, mutable_transmutes, non_camel_case_types, non_snake_case,
         non_upper_case_globals, unused_assignments, unused_mut)]
pub type __uint32_t = u32;
pub type uint32_t = __uint32_t;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct dv_info_t {
    pub dvType: i32,
    pub dvK: i32,
    pub dvB: i32,
    pub testt: i32,
    pub maski: i32,
    pub maskb: i32,
    pub dm: [uint32_t; 80],
}
/* **
* Copyright 2017 Marc Stevens <marc@marc-stevens.nl>, Dan Shumow <danshu@microsoft.com>
* Distributed under the MIT Software License.
* See accompanying file LICENSE.txt or copy at
* https://opensource.org/licenses/MIT
***/
/*
// this file was generated by the 'parse_bitrel' program in the tools section
// using the data files from directory 'tools/data/3565'
//
// sha1_dvs contains a list of SHA-1 Disturbance Vectors (DV) to check
// dvType, dvK and dvB define the DV: I(K,B) or II(K,B) (see the paper)
// dm[80] is the expanded message block XOR-difference defined by the DV
// testt is the step to do the recompression from for collision detection
// maski and maskb define the bit to check for each DV in the dvmask returned by ubc_check
//
// ubc_check takes as input an expanded message block and verifies the unavoidable bitconditions for all listed DVs
// it returns a dvmask where each bit belonging to a DV is set if all unavoidable bitconditions for that DV have been met
// thus one needs to do the recompression check for each DV that has its bit set
//
// ubc_check is programmatically generated and the unavoidable bitconditions have been hardcoded
// a directly verifiable version named ubc_check_verify can be found in ubc_check_verify.c
// ubc_check has been verified against ubc_check_verify using the 'ubc_check_test' program in the tools section
*/
static mut DV_I_43_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 0 as i32;
static mut DV_I_44_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 1 as i32;
static mut DV_I_45_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 2 as i32;
static mut DV_I_46_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 3 as i32;
static mut DV_I_46_2_bit: uint32_t =
    (1 as i32 as uint32_t) << 4 as i32;
static mut DV_I_47_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 5 as i32;
static mut DV_I_47_2_bit: uint32_t =
    (1 as i32 as uint32_t) << 6 as i32;
static mut DV_I_48_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 7 as i32;
static mut DV_I_48_2_bit: uint32_t =
    (1 as i32 as uint32_t) << 8 as i32;
static mut DV_I_49_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 9 as i32;
static mut DV_I_49_2_bit: uint32_t =
    (1 as i32 as uint32_t) << 10 as i32;
static mut DV_I_50_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 11 as i32;
static mut DV_I_50_2_bit: uint32_t =
    (1 as i32 as uint32_t) << 12 as i32;
static mut DV_I_51_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 13 as i32;
static mut DV_I_51_2_bit: uint32_t =
    (1 as i32 as uint32_t) << 14 as i32;
static mut DV_I_52_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 15 as i32;
static mut DV_II_45_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 16 as i32;
static mut DV_II_46_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 17 as i32;
static mut DV_II_46_2_bit: uint32_t =
    (1 as i32 as uint32_t) << 18 as i32;
static mut DV_II_47_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 19 as i32;
static mut DV_II_48_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 20 as i32;
static mut DV_II_49_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 21 as i32;
static mut DV_II_49_2_bit: uint32_t =
    (1 as i32 as uint32_t) << 22 as i32;
static mut DV_II_50_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 23 as i32;
static mut DV_II_50_2_bit: uint32_t =
    (1 as i32 as uint32_t) << 24 as i32;
static mut DV_II_51_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 25 as i32;
static mut DV_II_51_2_bit: uint32_t =
    (1 as i32 as uint32_t) << 26 as i32;
static mut DV_II_52_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 27 as i32;
static mut DV_II_53_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 28 as i32;
static mut DV_II_54_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 29 as i32;
static mut DV_II_55_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 30 as i32;
static mut DV_II_56_0_bit: uint32_t =
    (1 as i32 as uint32_t) << 31 as i32;
pub static mut sha1_dvs: [dv_info_t; 33] =
    [{
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 43 as i32,
                       dvB: 0 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 0 as i32,
                       dm:
                           [0x8000000 as i32 as uint32_t,
                            0x9800000c as u32,
                            0xd8000010 as u32,
                            0x8000010 as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x98000000 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x8 as i32 as uint32_t,
                            0xc0000000 as u32,
                            0x90000014 as u32,
                            0x10000010 as i32 as uint32_t,
                            0xb8000014 as u32,
                            0x28000000 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x48000000 as i32 as uint32_t,
                            0x8000018 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0x90000008 as u32,
                            0xc0000000 as u32,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0xb0000008 as u32,
                            0x40000000 as i32 as uint32_t,
                            0x90000000 as u32,
                            0xf0000010 as u32,
                            0x90000018 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0x90000010 as u32,
                            0x90000000 as u32,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000010 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x80000004 as u32,
                            0x80000080 as u32,
                            0x80000006 as u32,
                            0x49 as i32 as uint32_t,
                            0x103 as i32 as uint32_t,
                            0x80000009 as u32,
                            0x80000012 as u32,
                            0x80000202 as u32,
                            0x18 as i32 as uint32_t,
                            0x164 as i32 as uint32_t,
                            0x408 as i32 as uint32_t,
                            0x800000e6 as u32,
                            0x8000004c as u32,
                            0x803 as i32 as uint32_t,
                            0x80000161 as u32,
                            0x80000599 as u32],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 44 as i32,
                       dvB: 0 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 1 as i32,
                       dm:
                           [0xb4000008 as u32,
                            0x8000000 as i32 as uint32_t,
                            0x9800000c as u32,
                            0xd8000010 as u32,
                            0x8000010 as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x98000000 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x8 as i32 as uint32_t,
                            0xc0000000 as u32,
                            0x90000014 as u32,
                            0x10000010 as i32 as uint32_t,
                            0xb8000014 as u32,
                            0x28000000 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x48000000 as i32 as uint32_t,
                            0x8000018 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0x90000008 as u32,
                            0xc0000000 as u32,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0xb0000008 as u32,
                            0x40000000 as i32 as uint32_t,
                            0x90000000 as u32,
                            0xf0000010 as u32,
                            0x90000018 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0x90000010 as u32,
                            0x90000000 as u32,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000010 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x80000004 as u32,
                            0x80000080 as u32,
                            0x80000006 as u32,
                            0x49 as i32 as uint32_t,
                            0x103 as i32 as uint32_t,
                            0x80000009 as u32,
                            0x80000012 as u32,
                            0x80000202 as u32,
                            0x18 as i32 as uint32_t,
                            0x164 as i32 as uint32_t,
                            0x408 as i32 as uint32_t,
                            0x800000e6 as u32,
                            0x8000004c as u32,
                            0x803 as i32 as uint32_t,
                            0x80000161 as u32],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 45 as i32,
                       dvB: 0 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 2 as i32,
                       dm:
                           [0xf4000014 as u32,
                            0xb4000008 as u32,
                            0x8000000 as i32 as uint32_t,
                            0x9800000c as u32,
                            0xd8000010 as u32,
                            0x8000010 as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x98000000 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x8 as i32 as uint32_t,
                            0xc0000000 as u32,
                            0x90000014 as u32,
                            0x10000010 as i32 as uint32_t,
                            0xb8000014 as u32,
                            0x28000000 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x48000000 as i32 as uint32_t,
                            0x8000018 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0x90000008 as u32,
                            0xc0000000 as u32,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0xb0000008 as u32,
                            0x40000000 as i32 as uint32_t,
                            0x90000000 as u32,
                            0xf0000010 as u32,
                            0x90000018 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0x90000010 as u32,
                            0x90000000 as u32,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000010 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x80000004 as u32,
                            0x80000080 as u32,
                            0x80000006 as u32,
                            0x49 as i32 as uint32_t,
                            0x103 as i32 as uint32_t,
                            0x80000009 as u32,
                            0x80000012 as u32,
                            0x80000202 as u32,
                            0x18 as i32 as uint32_t,
                            0x164 as i32 as uint32_t,
                            0x408 as i32 as uint32_t,
                            0x800000e6 as u32,
                            0x8000004c as u32,
                            0x803 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 46 as i32,
                       dvB: 0 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 3 as i32,
                       dm:
                           [0x2c000010 as i32 as uint32_t,
                            0xf4000014 as u32,
                            0xb4000008 as u32,
                            0x8000000 as i32 as uint32_t,
                            0x9800000c as u32,
                            0xd8000010 as u32,
                            0x8000010 as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x98000000 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x8 as i32 as uint32_t,
                            0xc0000000 as u32,
                            0x90000014 as u32,
                            0x10000010 as i32 as uint32_t,
                            0xb8000014 as u32,
                            0x28000000 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x48000000 as i32 as uint32_t,
                            0x8000018 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0x90000008 as u32,
                            0xc0000000 as u32,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0xb0000008 as u32,
                            0x40000000 as i32 as uint32_t,
                            0x90000000 as u32,
                            0xf0000010 as u32,
                            0x90000018 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0x90000010 as u32,
                            0x90000000 as u32,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000010 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x80000004 as u32,
                            0x80000080 as u32,
                            0x80000006 as u32,
                            0x49 as i32 as uint32_t,
                            0x103 as i32 as uint32_t,
                            0x80000009 as u32,
                            0x80000012 as u32,
                            0x80000202 as u32,
                            0x18 as i32 as uint32_t,
                            0x164 as i32 as uint32_t,
                            0x408 as i32 as uint32_t,
                            0x800000e6 as u32,
                            0x8000004c as u32],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 46 as i32,
                       dvB: 2 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 4 as i32,
                       dm:
                           [0xb0000040 as u32,
                            0xd0000053 as u32,
                            0xd0000022 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x60000032 as i32 as uint32_t,
                            0x60000043 as i32 as uint32_t,
                            0x20000040 as i32 as uint32_t,
                            0xe0000042 as u32,
                            0x60000002 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x20 as i32 as uint32_t,
                            0x3 as i32 as uint32_t,
                            0x40000052 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0xe0000052 as u32,
                            0xa0000000 as u32,
                            0x80000040 as u32,
                            0x20000001 as i32 as uint32_t,
                            0x20000060 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x40000042 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0x40000022 as i32 as uint32_t,
                            0x3 as i32 as uint32_t,
                            0x40000042 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0xc0000022 as u32,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0x40000062 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x40000042 as i32 as uint32_t,
                            0x40000042 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0x80000002 as u32,
                            0x80000000 as u32,
                            0x80000002 as u32,
                            0x80000040 as u32,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x80 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x101 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x12 as i32 as uint32_t,
                            0x202 as i32 as uint32_t,
                            0x1a as i32 as uint32_t,
                            0x124 as i32 as uint32_t,
                            0x40c as i32 as uint32_t,
                            0x26 as i32 as uint32_t,
                            0x4a as i32 as uint32_t,
                            0x80a as i32 as uint32_t,
                            0x60 as i32 as uint32_t,
                            0x590 as i32 as uint32_t,
                            0x1020 as i32 as uint32_t,
                            0x39a as i32 as uint32_t,
                            0x132 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 47 as i32,
                       dvB: 0 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 5 as i32,
                       dm:
                           [0xc8000010 as u32,
                            0x2c000010 as i32 as uint32_t,
                            0xf4000014 as u32,
                            0xb4000008 as u32,
                            0x8000000 as i32 as uint32_t,
                            0x9800000c as u32,
                            0xd8000010 as u32,
                            0x8000010 as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x98000000 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x8 as i32 as uint32_t,
                            0xc0000000 as u32,
                            0x90000014 as u32,
                            0x10000010 as i32 as uint32_t,
                            0xb8000014 as u32,
                            0x28000000 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x48000000 as i32 as uint32_t,
                            0x8000018 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0x90000008 as u32,
                            0xc0000000 as u32,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0xb0000008 as u32,
                            0x40000000 as i32 as uint32_t,
                            0x90000000 as u32,
                            0xf0000010 as u32,
                            0x90000018 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0x90000010 as u32,
                            0x90000000 as u32,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000010 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x80000004 as u32,
                            0x80000080 as u32,
                            0x80000006 as u32,
                            0x49 as i32 as uint32_t,
                            0x103 as i32 as uint32_t,
                            0x80000009 as u32,
                            0x80000012 as u32,
                            0x80000202 as u32,
                            0x18 as i32 as uint32_t,
                            0x164 as i32 as uint32_t,
                            0x408 as i32 as uint32_t,
                            0x800000e6 as u32],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 47 as i32,
                       dvB: 2 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 6 as i32,
                       dm:
                           [0x20000043 as i32 as uint32_t,
                            0xb0000040 as u32,
                            0xd0000053 as u32,
                            0xd0000022 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x60000032 as i32 as uint32_t,
                            0x60000043 as i32 as uint32_t,
                            0x20000040 as i32 as uint32_t,
                            0xe0000042 as u32,
                            0x60000002 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x20 as i32 as uint32_t,
                            0x3 as i32 as uint32_t,
                            0x40000052 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0xe0000052 as u32,
                            0xa0000000 as u32,
                            0x80000040 as u32,
                            0x20000001 as i32 as uint32_t,
                            0x20000060 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x40000042 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0x40000022 as i32 as uint32_t,
                            0x3 as i32 as uint32_t,
                            0x40000042 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0xc0000022 as u32,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0x40000062 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x40000042 as i32 as uint32_t,
                            0x40000042 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0x80000002 as u32,
                            0x80000000 as u32,
                            0x80000002 as u32,
                            0x80000040 as u32,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x80 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x101 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x12 as i32 as uint32_t,
                            0x202 as i32 as uint32_t,
                            0x1a as i32 as uint32_t,
                            0x124 as i32 as uint32_t,
                            0x40c as i32 as uint32_t,
                            0x26 as i32 as uint32_t,
                            0x4a as i32 as uint32_t,
                            0x80a as i32 as uint32_t,
                            0x60 as i32 as uint32_t,
                            0x590 as i32 as uint32_t,
                            0x1020 as i32 as uint32_t,
                            0x39a as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 48 as i32,
                       dvB: 0 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 7 as i32,
                       dm:
                           [0xb800000a as u32,
                            0xc8000010 as u32,
                            0x2c000010 as i32 as uint32_t,
                            0xf4000014 as u32,
                            0xb4000008 as u32,
                            0x8000000 as i32 as uint32_t,
                            0x9800000c as u32,
                            0xd8000010 as u32,
                            0x8000010 as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x98000000 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x8 as i32 as uint32_t,
                            0xc0000000 as u32,
                            0x90000014 as u32,
                            0x10000010 as i32 as uint32_t,
                            0xb8000014 as u32,
                            0x28000000 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x48000000 as i32 as uint32_t,
                            0x8000018 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0x90000008 as u32,
                            0xc0000000 as u32,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0xb0000008 as u32,
                            0x40000000 as i32 as uint32_t,
                            0x90000000 as u32,
                            0xf0000010 as u32,
                            0x90000018 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0x90000010 as u32,
                            0x90000000 as u32,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000010 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x80000004 as u32,
                            0x80000080 as u32,
                            0x80000006 as u32,
                            0x49 as i32 as uint32_t,
                            0x103 as i32 as uint32_t,
                            0x80000009 as u32,
                            0x80000012 as u32,
                            0x80000202 as u32,
                            0x18 as i32 as uint32_t,
                            0x164 as i32 as uint32_t,
                            0x408 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 48 as i32,
                       dvB: 2 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 8 as i32,
                       dm:
                           [0xe000002a as u32,
                            0x20000043 as i32 as uint32_t,
                            0xb0000040 as u32,
                            0xd0000053 as u32,
                            0xd0000022 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x60000032 as i32 as uint32_t,
                            0x60000043 as i32 as uint32_t,
                            0x20000040 as i32 as uint32_t,
                            0xe0000042 as u32,
                            0x60000002 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x20 as i32 as uint32_t,
                            0x3 as i32 as uint32_t,
                            0x40000052 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0xe0000052 as u32,
                            0xa0000000 as u32,
                            0x80000040 as u32,
                            0x20000001 as i32 as uint32_t,
                            0x20000060 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x40000042 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0x40000022 as i32 as uint32_t,
                            0x3 as i32 as uint32_t,
                            0x40000042 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0xc0000022 as u32,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0x40000062 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x40000042 as i32 as uint32_t,
                            0x40000042 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0x80000002 as u32,
                            0x80000000 as u32,
                            0x80000002 as u32,
                            0x80000040 as u32,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x80 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x101 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x12 as i32 as uint32_t,
                            0x202 as i32 as uint32_t,
                            0x1a as i32 as uint32_t,
                            0x124 as i32 as uint32_t,
                            0x40c as i32 as uint32_t,
                            0x26 as i32 as uint32_t,
                            0x4a as i32 as uint32_t,
                            0x80a as i32 as uint32_t,
                            0x60 as i32 as uint32_t,
                            0x590 as i32 as uint32_t,
                            0x1020 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 49 as i32,
                       dvB: 0 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 9 as i32,
                       dm:
                           [0x18000000 as i32 as uint32_t,
                            0xb800000a as u32,
                            0xc8000010 as u32,
                            0x2c000010 as i32 as uint32_t,
                            0xf4000014 as u32,
                            0xb4000008 as u32,
                            0x8000000 as i32 as uint32_t,
                            0x9800000c as u32,
                            0xd8000010 as u32,
                            0x8000010 as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x98000000 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x8 as i32 as uint32_t,
                            0xc0000000 as u32,
                            0x90000014 as u32,
                            0x10000010 as i32 as uint32_t,
                            0xb8000014 as u32,
                            0x28000000 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x48000000 as i32 as uint32_t,
                            0x8000018 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0x90000008 as u32,
                            0xc0000000 as u32,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0xb0000008 as u32,
                            0x40000000 as i32 as uint32_t,
                            0x90000000 as u32,
                            0xf0000010 as u32,
                            0x90000018 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0x90000010 as u32,
                            0x90000000 as u32,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000010 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x80000004 as u32,
                            0x80000080 as u32,
                            0x80000006 as u32,
                            0x49 as i32 as uint32_t,
                            0x103 as i32 as uint32_t,
                            0x80000009 as u32,
                            0x80000012 as u32,
                            0x80000202 as u32,
                            0x18 as i32 as uint32_t,
                            0x164 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 49 as i32,
                       dvB: 2 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 10 as i32,
                       dm:
                           [0x60000000 as i32 as uint32_t,
                            0xe000002a as u32,
                            0x20000043 as i32 as uint32_t,
                            0xb0000040 as u32,
                            0xd0000053 as u32,
                            0xd0000022 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x60000032 as i32 as uint32_t,
                            0x60000043 as i32 as uint32_t,
                            0x20000040 as i32 as uint32_t,
                            0xe0000042 as u32,
                            0x60000002 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x20 as i32 as uint32_t,
                            0x3 as i32 as uint32_t,
                            0x40000052 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0xe0000052 as u32,
                            0xa0000000 as u32,
                            0x80000040 as u32,
                            0x20000001 as i32 as uint32_t,
                            0x20000060 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x40000042 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0x40000022 as i32 as uint32_t,
                            0x3 as i32 as uint32_t,
                            0x40000042 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0xc0000022 as u32,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0x40000062 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x40000042 as i32 as uint32_t,
                            0x40000042 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0x80000002 as u32,
                            0x80000000 as u32,
                            0x80000002 as u32,
                            0x80000040 as u32,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x80 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x101 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x12 as i32 as uint32_t,
                            0x202 as i32 as uint32_t,
                            0x1a as i32 as uint32_t,
                            0x124 as i32 as uint32_t,
                            0x40c as i32 as uint32_t,
                            0x26 as i32 as uint32_t,
                            0x4a as i32 as uint32_t,
                            0x80a as i32 as uint32_t,
                            0x60 as i32 as uint32_t,
                            0x590 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 50 as i32,
                       dvB: 0 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 11 as i32,
                       dm:
                           [0x800000c as i32 as uint32_t,
                            0x18000000 as i32 as uint32_t,
                            0xb800000a as u32,
                            0xc8000010 as u32,
                            0x2c000010 as i32 as uint32_t,
                            0xf4000014 as u32,
                            0xb4000008 as u32,
                            0x8000000 as i32 as uint32_t,
                            0x9800000c as u32,
                            0xd8000010 as u32,
                            0x8000010 as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x98000000 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x8 as i32 as uint32_t,
                            0xc0000000 as u32,
                            0x90000014 as u32,
                            0x10000010 as i32 as uint32_t,
                            0xb8000014 as u32,
                            0x28000000 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x48000000 as i32 as uint32_t,
                            0x8000018 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0x90000008 as u32,
                            0xc0000000 as u32,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0xb0000008 as u32,
                            0x40000000 as i32 as uint32_t,
                            0x90000000 as u32,
                            0xf0000010 as u32,
                            0x90000018 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0x90000010 as u32,
                            0x90000000 as u32,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000010 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x80000004 as u32,
                            0x80000080 as u32,
                            0x80000006 as u32,
                            0x49 as i32 as uint32_t,
                            0x103 as i32 as uint32_t,
                            0x80000009 as u32,
                            0x80000012 as u32,
                            0x80000202 as u32,
                            0x18 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 50 as i32,
                       dvB: 2 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 12 as i32,
                       dm:
                           [0x20000030 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0xe000002a as u32,
                            0x20000043 as i32 as uint32_t,
                            0xb0000040 as u32,
                            0xd0000053 as u32,
                            0xd0000022 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x60000032 as i32 as uint32_t,
                            0x60000043 as i32 as uint32_t,
                            0x20000040 as i32 as uint32_t,
                            0xe0000042 as u32,
                            0x60000002 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x20 as i32 as uint32_t,
                            0x3 as i32 as uint32_t,
                            0x40000052 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0xe0000052 as u32,
                            0xa0000000 as u32,
                            0x80000040 as u32,
                            0x20000001 as i32 as uint32_t,
                            0x20000060 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x40000042 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0x40000022 as i32 as uint32_t,
                            0x3 as i32 as uint32_t,
                            0x40000042 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0xc0000022 as u32,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0x40000062 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x40000042 as i32 as uint32_t,
                            0x40000042 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0x80000002 as u32,
                            0x80000000 as u32,
                            0x80000002 as u32,
                            0x80000040 as u32,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x80 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x101 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x12 as i32 as uint32_t,
                            0x202 as i32 as uint32_t,
                            0x1a as i32 as uint32_t,
                            0x124 as i32 as uint32_t,
                            0x40c as i32 as uint32_t,
                            0x26 as i32 as uint32_t,
                            0x4a as i32 as uint32_t,
                            0x80a as i32 as uint32_t,
                            0x60 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 51 as i32,
                       dvB: 0 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 13 as i32,
                       dm:
                           [0xe8000000 as u32,
                            0x800000c as i32 as uint32_t,
                            0x18000000 as i32 as uint32_t,
                            0xb800000a as u32,
                            0xc8000010 as u32,
                            0x2c000010 as i32 as uint32_t,
                            0xf4000014 as u32,
                            0xb4000008 as u32,
                            0x8000000 as i32 as uint32_t,
                            0x9800000c as u32,
                            0xd8000010 as u32,
                            0x8000010 as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x98000000 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x8 as i32 as uint32_t,
                            0xc0000000 as u32,
                            0x90000014 as u32,
                            0x10000010 as i32 as uint32_t,
                            0xb8000014 as u32,
                            0x28000000 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x48000000 as i32 as uint32_t,
                            0x8000018 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0x90000008 as u32,
                            0xc0000000 as u32,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0xb0000008 as u32,
                            0x40000000 as i32 as uint32_t,
                            0x90000000 as u32,
                            0xf0000010 as u32,
                            0x90000018 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0x90000010 as u32,
                            0x90000000 as u32,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000010 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x80000004 as u32,
                            0x80000080 as u32,
                            0x80000006 as u32,
                            0x49 as i32 as uint32_t,
                            0x103 as i32 as uint32_t,
                            0x80000009 as u32,
                            0x80000012 as u32,
                            0x80000202 as u32],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 51 as i32,
                       dvB: 2 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 14 as i32,
                       dm:
                           [0xa0000003 as u32,
                            0x20000030 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0xe000002a as u32,
                            0x20000043 as i32 as uint32_t,
                            0xb0000040 as u32,
                            0xd0000053 as u32,
                            0xd0000022 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x60000032 as i32 as uint32_t,
                            0x60000043 as i32 as uint32_t,
                            0x20000040 as i32 as uint32_t,
                            0xe0000042 as u32,
                            0x60000002 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x20 as i32 as uint32_t,
                            0x3 as i32 as uint32_t,
                            0x40000052 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0xe0000052 as u32,
                            0xa0000000 as u32,
                            0x80000040 as u32,
                            0x20000001 as i32 as uint32_t,
                            0x20000060 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x40000042 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0x40000022 as i32 as uint32_t,
                            0x3 as i32 as uint32_t,
                            0x40000042 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0xc0000022 as u32,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0xc0000043 as u32,
                            0x40000062 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x40000042 as i32 as uint32_t,
                            0x40000042 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0x80000002 as u32,
                            0x80000000 as u32,
                            0x80000002 as u32,
                            0x80000040 as u32,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x80 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x101 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x12 as i32 as uint32_t,
                            0x202 as i32 as uint32_t,
                            0x1a as i32 as uint32_t,
                            0x124 as i32 as uint32_t,
                            0x40c as i32 as uint32_t,
                            0x26 as i32 as uint32_t,
                            0x4a as i32 as uint32_t,
                            0x80a as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 1 as i32,
                       dvK: 52 as i32,
                       dvB: 0 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 15 as i32,
                       dm:
                           [0x4000010 as i32 as uint32_t,
                            0xe8000000 as u32,
                            0x800000c as i32 as uint32_t,
                            0x18000000 as i32 as uint32_t,
                            0xb800000a as u32,
                            0xc8000010 as u32,
                            0x2c000010 as i32 as uint32_t,
                            0xf4000014 as u32,
                            0xb4000008 as u32,
                            0x8000000 as i32 as uint32_t,
                            0x9800000c as u32,
                            0xd8000010 as u32,
                            0x8000010 as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x98000000 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x8 as i32 as uint32_t,
                            0xc0000000 as u32,
                            0x90000014 as u32,
                            0x10000010 as i32 as uint32_t,
                            0xb8000014 as u32,
                            0x28000000 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x48000000 as i32 as uint32_t,
                            0x8000018 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0x90000008 as u32,
                            0xc0000000 as u32,
                            0x90000010 as u32,
                            0xf0000010 as u32,
                            0xb0000008 as u32,
                            0x40000000 as i32 as uint32_t,
                            0x90000000 as u32,
                            0xf0000010 as u32,
                            0x90000018 as u32,
                            0x60000000 as i32 as uint32_t,
                            0x90000010 as u32,
                            0x90000010 as u32,
                            0x90000000 as u32,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x20000010 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000040 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x80000004 as u32,
                            0x80000080 as u32,
                            0x80000006 as u32,
                            0x49 as i32 as uint32_t,
                            0x103 as i32 as uint32_t,
                            0x80000009 as u32,
                            0x80000012 as u32],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 45 as i32,
                       dvB: 0 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 16 as i32,
                       dm:
                           [0xec000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x2c000004 as i32 as uint32_t,
                            0xbc000018 as u32,
                            0xb0000010 as u32,
                            0xc as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x8000018 as i32 as uint32_t,
                            0x78000010 as i32 as uint32_t,
                            0x8000014 as i32 as uint32_t,
                            0x70000010 as i32 as uint32_t,
                            0xb800001c as u32,
                            0xe8000000 as u32,
                            0xb0000004 as u32,
                            0x58000010 as i32 as uint32_t,
                            0xb000000c as u32,
                            0x48000000 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0xb8000010 as u32,
                            0x98000010 as u32,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x18 as i32 as uint32_t,
                            0xe0000000 as u32,
                            0x90000000 as u32,
                            0x30000010 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x10 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000041 as i32 as uint32_t,
                            0x40000022 as i32 as uint32_t,
                            0x80000005 as u32,
                            0xc0000082 as u32,
                            0xc0000046 as u32,
                            0x4000004b as i32 as uint32_t,
                            0x80000107 as u32,
                            0x89 as i32 as uint32_t,
                            0x14 as i32 as uint32_t,
                            0x8000024b as u32,
                            0x11b as i32 as uint32_t,
                            0x8000016d as u32,
                            0x8000041a as u32,
                            0x2e4 as i32 as uint32_t,
                            0x80000054 as u32,
                            0x967 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 46 as i32,
                       dvB: 0 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 17 as i32,
                       dm:
                           [0x2400001c as i32 as uint32_t,
                            0xec000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x2c000004 as i32 as uint32_t,
                            0xbc000018 as u32,
                            0xb0000010 as u32,
                            0xc as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x8000018 as i32 as uint32_t,
                            0x78000010 as i32 as uint32_t,
                            0x8000014 as i32 as uint32_t,
                            0x70000010 as i32 as uint32_t,
                            0xb800001c as u32,
                            0xe8000000 as u32,
                            0xb0000004 as u32,
                            0x58000010 as i32 as uint32_t,
                            0xb000000c as u32,
                            0x48000000 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0xb8000010 as u32,
                            0x98000010 as u32,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x18 as i32 as uint32_t,
                            0xe0000000 as u32,
                            0x90000000 as u32,
                            0x30000010 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x10 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000041 as i32 as uint32_t,
                            0x40000022 as i32 as uint32_t,
                            0x80000005 as u32,
                            0xc0000082 as u32,
                            0xc0000046 as u32,
                            0x4000004b as i32 as uint32_t,
                            0x80000107 as u32,
                            0x89 as i32 as uint32_t,
                            0x14 as i32 as uint32_t,
                            0x8000024b as u32,
                            0x11b as i32 as uint32_t,
                            0x8000016d as u32,
                            0x8000041a as u32,
                            0x2e4 as i32 as uint32_t,
                            0x80000054 as u32],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 46 as i32,
                       dvB: 2 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 18 as i32,
                       dm:
                           [0x90000070 as u32,
                            0xb0000053 as u32,
                            0x30000008 as i32 as uint32_t,
                            0x43 as i32 as uint32_t,
                            0xd0000072 as u32,
                            0xb0000010 as u32,
                            0xf0000062 as u32,
                            0xc0000042 as u32,
                            0x30 as i32 as uint32_t,
                            0xe0000042 as u32,
                            0x20000060 as i32 as uint32_t,
                            0xe0000041 as u32,
                            0x20000050 as i32 as uint32_t,
                            0xc0000041 as u32,
                            0xe0000072 as u32,
                            0xa0000003 as u32,
                            0xc0000012 as u32,
                            0x60000041 as i32 as uint32_t,
                            0xc0000032 as u32,
                            0x20000001 as i32 as uint32_t,
                            0xc0000002 as u32,
                            0xe0000042 as u32,
                            0x60000042 as i32 as uint32_t,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x60 as i32 as uint32_t,
                            0x80000003 as u32,
                            0x40000002 as i32 as uint32_t,
                            0xc0000040 as u32,
                            0xc0000002 as u32,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0x80000002 as u32,
                            0x40 as i32 as uint32_t,
                            0x2 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x80 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x105 as i32 as uint32_t,
                            0x89 as i32 as uint32_t,
                            0x16 as i32 as uint32_t,
                            0x20b as i32 as uint32_t,
                            0x11b as i32 as uint32_t,
                            0x12d as i32 as uint32_t,
                            0x41e as i32 as uint32_t,
                            0x224 as i32 as uint32_t,
                            0x50 as i32 as uint32_t,
                            0x92e as i32 as uint32_t,
                            0x46c as i32 as uint32_t,
                            0x5b6 as i32 as uint32_t,
                            0x106a as i32 as uint32_t,
                            0xb90 as i32 as uint32_t,
                            0x152 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 47 as i32,
                       dvB: 0 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 19 as i32,
                       dm:
                           [0x20000010 as i32 as uint32_t,
                            0x2400001c as i32 as uint32_t,
                            0xec000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x2c000004 as i32 as uint32_t,
                            0xbc000018 as u32,
                            0xb0000010 as u32,
                            0xc as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x8000018 as i32 as uint32_t,
                            0x78000010 as i32 as uint32_t,
                            0x8000014 as i32 as uint32_t,
                            0x70000010 as i32 as uint32_t,
                            0xb800001c as u32,
                            0xe8000000 as u32,
                            0xb0000004 as u32,
                            0x58000010 as i32 as uint32_t,
                            0xb000000c as u32,
                            0x48000000 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0xb8000010 as u32,
                            0x98000010 as u32,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x18 as i32 as uint32_t,
                            0xe0000000 as u32,
                            0x90000000 as u32,
                            0x30000010 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x10 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000041 as i32 as uint32_t,
                            0x40000022 as i32 as uint32_t,
                            0x80000005 as u32,
                            0xc0000082 as u32,
                            0xc0000046 as u32,
                            0x4000004b as i32 as uint32_t,
                            0x80000107 as u32,
                            0x89 as i32 as uint32_t,
                            0x14 as i32 as uint32_t,
                            0x8000024b as u32,
                            0x11b as i32 as uint32_t,
                            0x8000016d as u32,
                            0x8000041a as u32,
                            0x2e4 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 48 as i32,
                       dvB: 0 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 20 as i32,
                       dm:
                           [0xbc00001a as u32,
                            0x20000010 as i32 as uint32_t,
                            0x2400001c as i32 as uint32_t,
                            0xec000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x2c000004 as i32 as uint32_t,
                            0xbc000018 as u32,
                            0xb0000010 as u32,
                            0xc as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x8000018 as i32 as uint32_t,
                            0x78000010 as i32 as uint32_t,
                            0x8000014 as i32 as uint32_t,
                            0x70000010 as i32 as uint32_t,
                            0xb800001c as u32,
                            0xe8000000 as u32,
                            0xb0000004 as u32,
                            0x58000010 as i32 as uint32_t,
                            0xb000000c as u32,
                            0x48000000 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0xb8000010 as u32,
                            0x98000010 as u32,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x18 as i32 as uint32_t,
                            0xe0000000 as u32,
                            0x90000000 as u32,
                            0x30000010 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x10 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000041 as i32 as uint32_t,
                            0x40000022 as i32 as uint32_t,
                            0x80000005 as u32,
                            0xc0000082 as u32,
                            0xc0000046 as u32,
                            0x4000004b as i32 as uint32_t,
                            0x80000107 as u32,
                            0x89 as i32 as uint32_t,
                            0x14 as i32 as uint32_t,
                            0x8000024b as u32,
                            0x11b as i32 as uint32_t,
                            0x8000016d as u32,
                            0x8000041a as u32],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 49 as i32,
                       dvB: 0 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 21 as i32,
                       dm:
                           [0x3c000004 as i32 as uint32_t,
                            0xbc00001a as u32,
                            0x20000010 as i32 as uint32_t,
                            0x2400001c as i32 as uint32_t,
                            0xec000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x2c000004 as i32 as uint32_t,
                            0xbc000018 as u32,
                            0xb0000010 as u32,
                            0xc as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x8000018 as i32 as uint32_t,
                            0x78000010 as i32 as uint32_t,
                            0x8000014 as i32 as uint32_t,
                            0x70000010 as i32 as uint32_t,
                            0xb800001c as u32,
                            0xe8000000 as u32,
                            0xb0000004 as u32,
                            0x58000010 as i32 as uint32_t,
                            0xb000000c as u32,
                            0x48000000 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0xb8000010 as u32,
                            0x98000010 as u32,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x18 as i32 as uint32_t,
                            0xe0000000 as u32,
                            0x90000000 as u32,
                            0x30000010 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x10 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000041 as i32 as uint32_t,
                            0x40000022 as i32 as uint32_t,
                            0x80000005 as u32,
                            0xc0000082 as u32,
                            0xc0000046 as u32,
                            0x4000004b as i32 as uint32_t,
                            0x80000107 as u32,
                            0x89 as i32 as uint32_t,
                            0x14 as i32 as uint32_t,
                            0x8000024b as u32,
                            0x11b as i32 as uint32_t,
                            0x8000016d as u32],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 49 as i32,
                       dvB: 2 as i32,
                       testt: 58 as i32,
                       maski: 0 as i32,
                       maskb: 22 as i32,
                       dm:
                           [0xf0000010 as u32,
                            0xf000006a as u32,
                            0x80000040 as u32,
                            0x90000070 as u32,
                            0xb0000053 as u32,
                            0x30000008 as i32 as uint32_t,
                            0x43 as i32 as uint32_t,
                            0xd0000072 as u32,
                            0xb0000010 as u32,
                            0xf0000062 as u32,
                            0xc0000042 as u32,
                            0x30 as i32 as uint32_t,
                            0xe0000042 as u32,
                            0x20000060 as i32 as uint32_t,
                            0xe0000041 as u32,
                            0x20000050 as i32 as uint32_t,
                            0xc0000041 as u32,
                            0xe0000072 as u32,
                            0xa0000003 as u32,
                            0xc0000012 as u32,
                            0x60000041 as i32 as uint32_t,
                            0xc0000032 as u32,
                            0x20000001 as i32 as uint32_t,
                            0xc0000002 as u32,
                            0xe0000042 as u32,
                            0x60000042 as i32 as uint32_t,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x60 as i32 as uint32_t,
                            0x80000003 as u32,
                            0x40000002 as i32 as uint32_t,
                            0xc0000040 as u32,
                            0xc0000002 as u32,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0x80000002 as u32,
                            0x40 as i32 as uint32_t,
                            0x2 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x80 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x105 as i32 as uint32_t,
                            0x89 as i32 as uint32_t,
                            0x16 as i32 as uint32_t,
                            0x20b as i32 as uint32_t,
                            0x11b as i32 as uint32_t,
                            0x12d as i32 as uint32_t,
                            0x41e as i32 as uint32_t,
                            0x224 as i32 as uint32_t,
                            0x50 as i32 as uint32_t,
                            0x92e as i32 as uint32_t,
                            0x46c as i32 as uint32_t,
                            0x5b6 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 50 as i32,
                       dvB: 0 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 23 as i32,
                       dm:
                           [0xb400001c as u32,
                            0x3c000004 as i32 as uint32_t,
                            0xbc00001a as u32,
                            0x20000010 as i32 as uint32_t,
                            0x2400001c as i32 as uint32_t,
                            0xec000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x2c000004 as i32 as uint32_t,
                            0xbc000018 as u32,
                            0xb0000010 as u32,
                            0xc as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x8000018 as i32 as uint32_t,
                            0x78000010 as i32 as uint32_t,
                            0x8000014 as i32 as uint32_t,
                            0x70000010 as i32 as uint32_t,
                            0xb800001c as u32,
                            0xe8000000 as u32,
                            0xb0000004 as u32,
                            0x58000010 as i32 as uint32_t,
                            0xb000000c as u32,
                            0x48000000 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0xb8000010 as u32,
                            0x98000010 as u32,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x18 as i32 as uint32_t,
                            0xe0000000 as u32,
                            0x90000000 as u32,
                            0x30000010 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x10 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000041 as i32 as uint32_t,
                            0x40000022 as i32 as uint32_t,
                            0x80000005 as u32,
                            0xc0000082 as u32,
                            0xc0000046 as u32,
                            0x4000004b as i32 as uint32_t,
                            0x80000107 as u32,
                            0x89 as i32 as uint32_t,
                            0x14 as i32 as uint32_t,
                            0x8000024b as u32,
                            0x11b as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 50 as i32,
                       dvB: 2 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 24 as i32,
                       dm:
                           [0xd0000072 as u32,
                            0xf0000010 as u32,
                            0xf000006a as u32,
                            0x80000040 as u32,
                            0x90000070 as u32,
                            0xb0000053 as u32,
                            0x30000008 as i32 as uint32_t,
                            0x43 as i32 as uint32_t,
                            0xd0000072 as u32,
                            0xb0000010 as u32,
                            0xf0000062 as u32,
                            0xc0000042 as u32,
                            0x30 as i32 as uint32_t,
                            0xe0000042 as u32,
                            0x20000060 as i32 as uint32_t,
                            0xe0000041 as u32,
                            0x20000050 as i32 as uint32_t,
                            0xc0000041 as u32,
                            0xe0000072 as u32,
                            0xa0000003 as u32,
                            0xc0000012 as u32,
                            0x60000041 as i32 as uint32_t,
                            0xc0000032 as u32,
                            0x20000001 as i32 as uint32_t,
                            0xc0000002 as u32,
                            0xe0000042 as u32,
                            0x60000042 as i32 as uint32_t,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x60 as i32 as uint32_t,
                            0x80000003 as u32,
                            0x40000002 as i32 as uint32_t,
                            0xc0000040 as u32,
                            0xc0000002 as u32,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0x80000002 as u32,
                            0x40 as i32 as uint32_t,
                            0x2 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x80 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x105 as i32 as uint32_t,
                            0x89 as i32 as uint32_t,
                            0x16 as i32 as uint32_t,
                            0x20b as i32 as uint32_t,
                            0x11b as i32 as uint32_t,
                            0x12d as i32 as uint32_t,
                            0x41e as i32 as uint32_t,
                            0x224 as i32 as uint32_t,
                            0x50 as i32 as uint32_t,
                            0x92e as i32 as uint32_t,
                            0x46c as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 51 as i32,
                       dvB: 0 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 25 as i32,
                       dm:
                           [0xc0000010 as u32,
                            0xb400001c as u32,
                            0x3c000004 as i32 as uint32_t,
                            0xbc00001a as u32,
                            0x20000010 as i32 as uint32_t,
                            0x2400001c as i32 as uint32_t,
                            0xec000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x2c000004 as i32 as uint32_t,
                            0xbc000018 as u32,
                            0xb0000010 as u32,
                            0xc as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x8000018 as i32 as uint32_t,
                            0x78000010 as i32 as uint32_t,
                            0x8000014 as i32 as uint32_t,
                            0x70000010 as i32 as uint32_t,
                            0xb800001c as u32,
                            0xe8000000 as u32,
                            0xb0000004 as u32,
                            0x58000010 as i32 as uint32_t,
                            0xb000000c as u32,
                            0x48000000 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0xb8000010 as u32,
                            0x98000010 as u32,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x18 as i32 as uint32_t,
                            0xe0000000 as u32,
                            0x90000000 as u32,
                            0x30000010 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x10 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000041 as i32 as uint32_t,
                            0x40000022 as i32 as uint32_t,
                            0x80000005 as u32,
                            0xc0000082 as u32,
                            0xc0000046 as u32,
                            0x4000004b as i32 as uint32_t,
                            0x80000107 as u32,
                            0x89 as i32 as uint32_t,
                            0x14 as i32 as uint32_t,
                            0x8000024b as u32],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 51 as i32,
                       dvB: 2 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 26 as i32,
                       dm:
                           [0x43 as i32 as uint32_t,
                            0xd0000072 as u32,
                            0xf0000010 as u32,
                            0xf000006a as u32,
                            0x80000040 as u32,
                            0x90000070 as u32,
                            0xb0000053 as u32,
                            0x30000008 as i32 as uint32_t,
                            0x43 as i32 as uint32_t,
                            0xd0000072 as u32,
                            0xb0000010 as u32,
                            0xf0000062 as u32,
                            0xc0000042 as u32,
                            0x30 as i32 as uint32_t,
                            0xe0000042 as u32,
                            0x20000060 as i32 as uint32_t,
                            0xe0000041 as u32,
                            0x20000050 as i32 as uint32_t,
                            0xc0000041 as u32,
                            0xe0000072 as u32,
                            0xa0000003 as u32,
                            0xc0000012 as u32,
                            0x60000041 as i32 as uint32_t,
                            0xc0000032 as u32,
                            0x20000001 as i32 as uint32_t,
                            0xc0000002 as u32,
                            0xe0000042 as u32,
                            0x60000042 as i32 as uint32_t,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000000 as u32,
                            0x40 as i32 as uint32_t,
                            0x80000001 as u32,
                            0x60 as i32 as uint32_t,
                            0x80000003 as u32,
                            0x40000002 as i32 as uint32_t,
                            0xc0000040 as u32,
                            0xc0000002 as u32,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0x80000002 as u32,
                            0x40 as i32 as uint32_t,
                            0x2 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0x2 as i32 as uint32_t,
                            0x40 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x80000040 as u32,
                            0x80000002 as u32,
                            0 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x80000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x80 as i32 as uint32_t,
                            0x4 as i32 as uint32_t,
                            0x9 as i32 as uint32_t,
                            0x105 as i32 as uint32_t,
                            0x89 as i32 as uint32_t,
                            0x16 as i32 as uint32_t,
                            0x20b as i32 as uint32_t,
                            0x11b as i32 as uint32_t,
                            0x12d as i32 as uint32_t,
                            0x41e as i32 as uint32_t,
                            0x224 as i32 as uint32_t,
                            0x50 as i32 as uint32_t,
                            0x92e as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 52 as i32,
                       dvB: 0 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 27 as i32,
                       dm:
                           [0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x3c000004 as i32 as uint32_t,
                            0xbc00001a as u32,
                            0x20000010 as i32 as uint32_t,
                            0x2400001c as i32 as uint32_t,
                            0xec000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x2c000004 as i32 as uint32_t,
                            0xbc000018 as u32,
                            0xb0000010 as u32,
                            0xc as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x8000018 as i32 as uint32_t,
                            0x78000010 as i32 as uint32_t,
                            0x8000014 as i32 as uint32_t,
                            0x70000010 as i32 as uint32_t,
                            0xb800001c as u32,
                            0xe8000000 as u32,
                            0xb0000004 as u32,
                            0x58000010 as i32 as uint32_t,
                            0xb000000c as u32,
                            0x48000000 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0xb8000010 as u32,
                            0x98000010 as u32,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x18 as i32 as uint32_t,
                            0xe0000000 as u32,
                            0x90000000 as u32,
                            0x30000010 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x10 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000041 as i32 as uint32_t,
                            0x40000022 as i32 as uint32_t,
                            0x80000005 as u32,
                            0xc0000082 as u32,
                            0xc0000046 as u32,
                            0x4000004b as i32 as uint32_t,
                            0x80000107 as u32,
                            0x89 as i32 as uint32_t,
                            0x14 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 53 as i32,
                       dvB: 0 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 28 as i32,
                       dm:
                           [0xcc000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x3c000004 as i32 as uint32_t,
                            0xbc00001a as u32,
                            0x20000010 as i32 as uint32_t,
                            0x2400001c as i32 as uint32_t,
                            0xec000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x2c000004 as i32 as uint32_t,
                            0xbc000018 as u32,
                            0xb0000010 as u32,
                            0xc as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x8000018 as i32 as uint32_t,
                            0x78000010 as i32 as uint32_t,
                            0x8000014 as i32 as uint32_t,
                            0x70000010 as i32 as uint32_t,
                            0xb800001c as u32,
                            0xe8000000 as u32,
                            0xb0000004 as u32,
                            0x58000010 as i32 as uint32_t,
                            0xb000000c as u32,
                            0x48000000 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0xb8000010 as u32,
                            0x98000010 as u32,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x18 as i32 as uint32_t,
                            0xe0000000 as u32,
                            0x90000000 as u32,
                            0x30000010 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x10 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000041 as i32 as uint32_t,
                            0x40000022 as i32 as uint32_t,
                            0x80000005 as u32,
                            0xc0000082 as u32,
                            0xc0000046 as u32,
                            0x4000004b as i32 as uint32_t,
                            0x80000107 as u32,
                            0x89 as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 54 as i32,
                       dvB: 0 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 29 as i32,
                       dm:
                           [0x400001c as i32 as uint32_t,
                            0xcc000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x3c000004 as i32 as uint32_t,
                            0xbc00001a as u32,
                            0x20000010 as i32 as uint32_t,
                            0x2400001c as i32 as uint32_t,
                            0xec000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x2c000004 as i32 as uint32_t,
                            0xbc000018 as u32,
                            0xb0000010 as u32,
                            0xc as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x8000018 as i32 as uint32_t,
                            0x78000010 as i32 as uint32_t,
                            0x8000014 as i32 as uint32_t,
                            0x70000010 as i32 as uint32_t,
                            0xb800001c as u32,
                            0xe8000000 as u32,
                            0xb0000004 as u32,
                            0x58000010 as i32 as uint32_t,
                            0xb000000c as u32,
                            0x48000000 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0xb8000010 as u32,
                            0x98000010 as u32,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x18 as i32 as uint32_t,
                            0xe0000000 as u32,
                            0x90000000 as u32,
                            0x30000010 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x10 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000041 as i32 as uint32_t,
                            0x40000022 as i32 as uint32_t,
                            0x80000005 as u32,
                            0xc0000082 as u32,
                            0xc0000046 as u32,
                            0x4000004b as i32 as uint32_t,
                            0x80000107 as u32],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 55 as i32,
                       dvB: 0 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 30 as i32,
                       dm:
                           [0x10 as i32 as uint32_t,
                            0x400001c as i32 as uint32_t,
                            0xcc000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x3c000004 as i32 as uint32_t,
                            0xbc00001a as u32,
                            0x20000010 as i32 as uint32_t,
                            0x2400001c as i32 as uint32_t,
                            0xec000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x2c000004 as i32 as uint32_t,
                            0xbc000018 as u32,
                            0xb0000010 as u32,
                            0xc as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x8000018 as i32 as uint32_t,
                            0x78000010 as i32 as uint32_t,
                            0x8000014 as i32 as uint32_t,
                            0x70000010 as i32 as uint32_t,
                            0xb800001c as u32,
                            0xe8000000 as u32,
                            0xb0000004 as u32,
                            0x58000010 as i32 as uint32_t,
                            0xb000000c as u32,
                            0x48000000 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0xb8000010 as u32,
                            0x98000010 as u32,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x18 as i32 as uint32_t,
                            0xe0000000 as u32,
                            0x90000000 as u32,
                            0x30000010 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x10 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000041 as i32 as uint32_t,
                            0x40000022 as i32 as uint32_t,
                            0x80000005 as u32,
                            0xc0000082 as u32,
                            0xc0000046 as u32,
                            0x4000004b as i32 as uint32_t],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 2 as i32,
                       dvK: 56 as i32,
                       dvB: 0 as i32,
                       testt: 65 as i32,
                       maski: 0 as i32,
                       maskb: 31 as i32,
                       dm:
                           [0x2600001a as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x400001c as i32 as uint32_t,
                            0xcc000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x3c000004 as i32 as uint32_t,
                            0xbc00001a as u32,
                            0x20000010 as i32 as uint32_t,
                            0x2400001c as i32 as uint32_t,
                            0xec000014 as u32,
                            0xc000002 as i32 as uint32_t,
                            0xc0000010 as u32,
                            0xb400001c as u32,
                            0x2c000004 as i32 as uint32_t,
                            0xbc000018 as u32,
                            0xb0000010 as u32,
                            0xc as i32 as uint32_t,
                            0xb8000010 as u32,
                            0x8000018 as i32 as uint32_t,
                            0x78000010 as i32 as uint32_t,
                            0x8000014 as i32 as uint32_t,
                            0x70000010 as i32 as uint32_t,
                            0xb800001c as u32,
                            0xe8000000 as u32,
                            0xb0000004 as u32,
                            0x58000010 as i32 as uint32_t,
                            0xb000000c as u32,
                            0x48000000 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0xb8000010 as u32,
                            0x98000010 as u32,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x10 as i32 as uint32_t,
                            0x60000000 as i32 as uint32_t,
                            0x18 as i32 as uint32_t,
                            0xe0000000 as u32,
                            0x90000000 as u32,
                            0x30000010 as i32 as uint32_t,
                            0xb0000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0x10 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x80000000 as u32,
                            0x10 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x20000010 as i32 as uint32_t,
                            0xa0000000 as u32,
                            0 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0x20000000 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x20 as i32 as uint32_t,
                            0x1 as i32 as uint32_t,
                            0x40000002 as i32 as uint32_t,
                            0x40000041 as i32 as uint32_t,
                            0x40000022 as i32 as uint32_t,
                            0x80000005 as u32,
                            0xc0000082 as u32,
                            0xc0000046 as u32],};
         init
     },
     {
         let mut init =
             dv_info_t{dvType: 0 as i32,
                       dvK: 0 as i32,
                       dvB: 0 as i32,
                       testt: 0 as i32,
                       maski: 0 as i32,
                       maskb: 0 as i32,
                       dm:
                           [0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t,
                            0 as i32 as uint32_t],};
         init
     }];
pub unsafe fn ubc_check(mut W: *const uint32_t,
                        mut dvmask: *mut uint32_t) {
    let mut mask: uint32_t = !(0 as i32 as uint32_t);
    mask &=
        ((*W.offset(44 as i32 as isize) ^
              *W.offset(45 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_48_0_bit | DV_I_51_0_bit | DV_I_52_0_bit | DV_II_45_0_bit |
                  DV_II_46_0_bit | DV_II_50_0_bit | DV_II_51_0_bit);
    mask &=
        ((*W.offset(49 as i32 as isize) ^
              *W.offset(50 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_46_0_bit | DV_II_45_0_bit | DV_II_50_0_bit | DV_II_51_0_bit
                  | DV_II_55_0_bit | DV_II_56_0_bit);
    mask &=
        ((*W.offset(48 as i32 as isize) ^
              *W.offset(49 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_45_0_bit | DV_I_52_0_bit | DV_II_49_0_bit | DV_II_50_0_bit
                  | DV_II_54_0_bit | DV_II_55_0_bit);
    mask &=
        ((*W.offset(47 as i32 as isize) ^
              *W.offset(50 as i32 as isize) >> 25 as i32) &
             ((1 as i32) << 4 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 4 as i32) as
                                                u32) |
            !(DV_I_47_0_bit | DV_I_49_0_bit | DV_I_51_0_bit | DV_II_45_0_bit |
                  DV_II_51_0_bit | DV_II_56_0_bit);
    mask &=
        ((*W.offset(47 as i32 as isize) ^
              *W.offset(48 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_44_0_bit | DV_I_51_0_bit | DV_II_48_0_bit | DV_II_49_0_bit
                  | DV_II_53_0_bit | DV_II_54_0_bit);
    mask &=
        ((*W.offset(46 as i32 as isize) >> 4 as i32 ^
              *W.offset(49 as i32 as isize) >> 29 as i32) &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_46_0_bit | DV_I_48_0_bit | DV_I_50_0_bit | DV_I_52_0_bit |
                  DV_II_50_0_bit | DV_II_55_0_bit);
    mask &=
        ((*W.offset(46 as i32 as isize) ^
              *W.offset(47 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_43_0_bit | DV_I_50_0_bit | DV_II_47_0_bit | DV_II_48_0_bit
                  | DV_II_52_0_bit | DV_II_53_0_bit);
    mask &=
        ((*W.offset(45 as i32 as isize) >> 4 as i32 ^
              *W.offset(48 as i32 as isize) >> 29 as i32) &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_45_0_bit | DV_I_47_0_bit | DV_I_49_0_bit | DV_I_51_0_bit |
                  DV_II_49_0_bit | DV_II_54_0_bit);
    mask &=
        ((*W.offset(45 as i32 as isize) ^
              *W.offset(46 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_49_0_bit | DV_I_52_0_bit | DV_II_46_0_bit | DV_II_47_0_bit
                  | DV_II_51_0_bit | DV_II_52_0_bit);
    mask &=
        ((*W.offset(44 as i32 as isize) >> 4 as i32 ^
              *W.offset(47 as i32 as isize) >> 29 as i32) &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_44_0_bit | DV_I_46_0_bit | DV_I_48_0_bit | DV_I_50_0_bit |
                  DV_II_48_0_bit | DV_II_53_0_bit);
    mask &=
        ((*W.offset(43 as i32 as isize) >> 4 as i32 ^
              *W.offset(46 as i32 as isize) >> 29 as i32) &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_43_0_bit | DV_I_45_0_bit | DV_I_47_0_bit | DV_I_49_0_bit |
                  DV_II_47_0_bit | DV_II_52_0_bit);
    mask &=
        ((*W.offset(43 as i32 as isize) ^
              *W.offset(44 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_47_0_bit | DV_I_50_0_bit | DV_I_51_0_bit | DV_II_45_0_bit |
                  DV_II_49_0_bit | DV_II_50_0_bit);
    mask &=
        ((*W.offset(42 as i32 as isize) >> 4 as i32 ^
              *W.offset(45 as i32 as isize) >> 29 as i32) &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_44_0_bit | DV_I_46_0_bit | DV_I_48_0_bit | DV_I_52_0_bit |
                  DV_II_46_0_bit | DV_II_51_0_bit);
    mask &=
        ((*W.offset(41 as i32 as isize) >> 4 as i32 ^
              *W.offset(44 as i32 as isize) >> 29 as i32) &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_43_0_bit | DV_I_45_0_bit | DV_I_47_0_bit | DV_I_51_0_bit |
                  DV_II_45_0_bit | DV_II_50_0_bit);
    mask &=
        ((*W.offset(40 as i32 as isize) ^
              *W.offset(41 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_44_0_bit | DV_I_47_0_bit | DV_I_48_0_bit | DV_II_46_0_bit |
                  DV_II_47_0_bit | DV_II_56_0_bit);
    mask &=
        ((*W.offset(54 as i32 as isize) ^
              *W.offset(55 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_51_0_bit | DV_II_47_0_bit | DV_II_50_0_bit | DV_II_55_0_bit
                  | DV_II_56_0_bit);
    mask &=
        ((*W.offset(53 as i32 as isize) ^
              *W.offset(54 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_50_0_bit | DV_II_46_0_bit | DV_II_49_0_bit | DV_II_54_0_bit
                  | DV_II_55_0_bit);
    mask &=
        ((*W.offset(52 as i32 as isize) ^
              *W.offset(53 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_49_0_bit | DV_II_45_0_bit | DV_II_48_0_bit | DV_II_53_0_bit
                  | DV_II_54_0_bit);
    mask &=
        ((*W.offset(50 as i32 as isize) ^
              *W.offset(53 as i32 as isize) >> 25 as i32) &
             ((1 as i32) << 4 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 4 as i32) as
                                                u32) |
            !(DV_I_50_0_bit | DV_I_52_0_bit | DV_II_46_0_bit | DV_II_48_0_bit
                  | DV_II_54_0_bit);
    mask &=
        ((*W.offset(50 as i32 as isize) ^
              *W.offset(51 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_47_0_bit | DV_II_46_0_bit | DV_II_51_0_bit | DV_II_52_0_bit
                  | DV_II_56_0_bit);
    mask &=
        ((*W.offset(49 as i32 as isize) ^
              *W.offset(52 as i32 as isize) >> 25 as i32) &
             ((1 as i32) << 4 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 4 as i32) as
                                                u32) |
            !(DV_I_49_0_bit | DV_I_51_0_bit | DV_II_45_0_bit | DV_II_47_0_bit
                  | DV_II_53_0_bit);
    mask &=
        ((*W.offset(48 as i32 as isize) ^
              *W.offset(51 as i32 as isize) >> 25 as i32) &
             ((1 as i32) << 4 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 4 as i32) as
                                                u32) |
            !(DV_I_48_0_bit | DV_I_50_0_bit | DV_I_52_0_bit | DV_II_46_0_bit |
                  DV_II_52_0_bit);
    mask &=
        ((*W.offset(42 as i32 as isize) ^
              *W.offset(43 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_46_0_bit | DV_I_49_0_bit | DV_I_50_0_bit | DV_II_48_0_bit |
                  DV_II_49_0_bit);
    mask &=
        ((*W.offset(41 as i32 as isize) ^
              *W.offset(42 as i32 as isize)) >> 29 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_45_0_bit | DV_I_48_0_bit | DV_I_49_0_bit | DV_II_47_0_bit |
                  DV_II_48_0_bit);
    mask &=
        ((*W.offset(40 as i32 as isize) >> 4 as i32 ^
              *W.offset(43 as i32 as isize) >> 29 as i32) &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_44_0_bit | DV_I_46_0_bit | DV_I_50_0_bit | DV_II_49_0_bit |
                  DV_II_56_0_bit);
    mask &=
        ((*W.offset(39 as i32 as isize) >> 4 as i32 ^
              *W.offset(42 as i32 as isize) >> 29 as i32) &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_43_0_bit | DV_I_45_0_bit | DV_I_49_0_bit | DV_II_48_0_bit |
                  DV_II_55_0_bit);
    if mask &
           (DV_I_44_0_bit | DV_I_48_0_bit | DV_II_47_0_bit | DV_II_54_0_bit |
                DV_II_56_0_bit) != 0 {
        mask &=
            ((*W.offset(38 as i32 as isize) >> 4 as i32 ^
                  *W.offset(41 as i32 as isize) >> 29 as i32)
                 &
                 1 as i32 as
                     u32).wrapping_sub(1 as i32 as
                                                    u32) |
                !(DV_I_44_0_bit | DV_I_48_0_bit | DV_II_47_0_bit |
                      DV_II_54_0_bit | DV_II_56_0_bit)
    }
    mask &=
        ((*W.offset(37 as i32 as isize) >> 4 as i32 ^
              *W.offset(40 as i32 as isize) >> 29 as i32) &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            |
            !(DV_I_43_0_bit | DV_I_47_0_bit | DV_II_46_0_bit | DV_II_53_0_bit
                  | DV_II_55_0_bit);
    if mask &
           (DV_I_52_0_bit | DV_II_48_0_bit | DV_II_51_0_bit | DV_II_56_0_bit)
           != 0 {
        mask &=
            ((*W.offset(55 as i32 as isize) ^
                  *W.offset(56 as i32 as isize)) >> 29 as i32
                 &
                 1 as i32 as
                     u32).wrapping_sub(1 as i32 as
                                                    u32) |
                !(DV_I_52_0_bit | DV_II_48_0_bit | DV_II_51_0_bit |
                      DV_II_56_0_bit)
    }
    if mask &
           (DV_I_52_0_bit | DV_II_48_0_bit | DV_II_50_0_bit | DV_II_56_0_bit)
           != 0 {
        mask &=
            ((*W.offset(52 as i32 as isize) ^
                  *W.offset(55 as i32 as isize) >> 25 as i32)
                 &
                 ((1 as i32) << 4 as i32) as
                     u32).wrapping_sub(((1 as i32) <<
                                                     4 as i32) as
                                                    u32) |
                !(DV_I_52_0_bit | DV_II_48_0_bit | DV_II_50_0_bit |
                      DV_II_56_0_bit)
    }
    if mask &
           (DV_I_51_0_bit | DV_II_47_0_bit | DV_II_49_0_bit | DV_II_55_0_bit)
           != 0 {
        mask &=
            ((*W.offset(51 as i32 as isize) ^
                  *W.offset(54 as i32 as isize) >> 25 as i32)
                 &
                 ((1 as i32) << 4 as i32) as
                     u32).wrapping_sub(((1 as i32) <<
                                                     4 as i32) as
                                                    u32) |
                !(DV_I_51_0_bit | DV_II_47_0_bit | DV_II_49_0_bit |
                      DV_II_55_0_bit)
    }
    if mask &
           (DV_I_48_0_bit | DV_II_47_0_bit | DV_II_52_0_bit | DV_II_53_0_bit)
           != 0 {
        mask &=
            ((*W.offset(51 as i32 as isize) ^
                  *W.offset(52 as i32 as isize)) >> 29 as i32
                 &
                 1 as i32 as
                     u32).wrapping_sub(1 as i32 as
                                                    u32) |
                !(DV_I_48_0_bit | DV_II_47_0_bit | DV_II_52_0_bit |
                      DV_II_53_0_bit)
    }
    if mask &
           (DV_I_46_0_bit | DV_I_49_0_bit | DV_II_45_0_bit | DV_II_48_0_bit)
           != 0 {
        mask &=
            ((*W.offset(36 as i32 as isize) >> 4 as i32 ^
                  *W.offset(40 as i32 as isize) >> 29 as i32)
                 &
                 1 as i32 as
                     u32).wrapping_sub(1 as i32 as
                                                    u32) |
                !(DV_I_46_0_bit | DV_I_49_0_bit | DV_II_45_0_bit |
                      DV_II_48_0_bit)
    }
    if mask & (DV_I_52_0_bit | DV_II_48_0_bit | DV_II_49_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(53 as i32 as
                                                           isize) ^
                                                 *W.offset(56 as i32
                                                               as isize)) >>
                                                29 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_52_0_bit | DV_II_48_0_bit | DV_II_49_0_bit)
    }
    if mask & (DV_I_50_0_bit | DV_II_46_0_bit | DV_II_47_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(51 as i32 as
                                                           isize) ^
                                                 *W.offset(54 as i32
                                                               as isize)) >>
                                                29 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_50_0_bit | DV_II_46_0_bit | DV_II_47_0_bit)
    }
    if mask & (DV_I_49_0_bit | DV_I_51_0_bit | DV_II_45_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(50 as i32 as
                                                           isize) ^
                                                 *W.offset(52 as i32
                                                               as isize)) >>
                                                29 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_49_0_bit | DV_I_51_0_bit | DV_II_45_0_bit)
    }
    if mask & (DV_I_48_0_bit | DV_I_50_0_bit | DV_I_52_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(49 as i32 as
                                                           isize) ^
                                                 *W.offset(51 as i32
                                                               as isize)) >>
                                                29 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_48_0_bit | DV_I_50_0_bit | DV_I_52_0_bit)
    }
    if mask & (DV_I_47_0_bit | DV_I_49_0_bit | DV_I_51_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(48 as i32 as
                                                           isize) ^
                                                 *W.offset(50 as i32
                                                               as isize)) >>
                                                29 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_47_0_bit | DV_I_49_0_bit | DV_I_51_0_bit)
    }
    if mask & (DV_I_46_0_bit | DV_I_48_0_bit | DV_I_50_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(47 as i32 as
                                                           isize) ^
                                                 *W.offset(49 as i32
                                                               as isize)) >>
                                                29 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_46_0_bit | DV_I_48_0_bit | DV_I_50_0_bit)
    }
    if mask & (DV_I_45_0_bit | DV_I_47_0_bit | DV_I_49_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(46 as i32 as
                                                           isize) ^
                                                 *W.offset(48 as i32
                                                               as isize)) >>
                                                29 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_45_0_bit | DV_I_47_0_bit | DV_I_49_0_bit)
    }
    mask &=
        ((*W.offset(45 as i32 as isize) ^
              *W.offset(47 as i32 as isize)) &
             ((1 as i32) << 6 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 6 as i32) as
                                                u32) |
            !(DV_I_47_2_bit | DV_I_49_2_bit | DV_I_51_2_bit);
    if mask & (DV_I_44_0_bit | DV_I_46_0_bit | DV_I_48_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(45 as i32 as
                                                           isize) ^
                                                 *W.offset(47 as i32
                                                               as isize)) >>
                                                29 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_44_0_bit | DV_I_46_0_bit | DV_I_48_0_bit)
    }
    mask &=
        ((*W.offset(44 as i32 as isize) ^
              *W.offset(46 as i32 as isize)) >> 6 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            | !(DV_I_46_2_bit | DV_I_48_2_bit | DV_I_50_2_bit);
    if mask & (DV_I_43_0_bit | DV_I_45_0_bit | DV_I_47_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(44 as i32 as
                                                           isize) ^
                                                 *W.offset(46 as i32
                                                               as isize)) >>
                                                29 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_43_0_bit | DV_I_45_0_bit | DV_I_47_0_bit)
    }
    mask &=
        (0 as i32 as
             u32).wrapping_sub((*W.offset(41 as i32 as isize)
                                             ^
                                             *W.offset(42 as i32 as
                                                           isize) >>
                                                 5 as i32) &
                                            ((1 as i32) <<
                                                 1 as i32) as
                                                u32) |
            !(DV_I_48_2_bit | DV_II_46_2_bit | DV_II_51_2_bit);
    mask &=
        (0 as i32 as
             u32).wrapping_sub((*W.offset(40 as i32 as isize)
                                             ^
                                             *W.offset(41 as i32 as
                                                           isize) >>
                                                 5 as i32) &
                                            ((1 as i32) <<
                                                 1 as i32) as
                                                u32) |
            !(DV_I_47_2_bit | DV_I_51_2_bit | DV_II_50_2_bit);
    if mask & (DV_I_44_0_bit | DV_I_46_0_bit | DV_II_56_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(40 as i32 as
                                                           isize) ^
                                                 *W.offset(42 as i32
                                                               as isize)) >>
                                                4 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_44_0_bit | DV_I_46_0_bit | DV_II_56_0_bit)
    }
    mask &=
        (0 as i32 as
             u32).wrapping_sub((*W.offset(39 as i32 as isize)
                                             ^
                                             *W.offset(40 as i32 as
                                                           isize) >>
                                                 5 as i32) &
                                            ((1 as i32) <<
                                                 1 as i32) as
                                                u32) |
            !(DV_I_46_2_bit | DV_I_50_2_bit | DV_II_49_2_bit);
    if mask & (DV_I_43_0_bit | DV_I_45_0_bit | DV_II_55_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(39 as i32 as
                                                           isize) ^
                                                 *W.offset(41 as i32
                                                               as isize)) >>
                                                4 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_43_0_bit | DV_I_45_0_bit | DV_II_55_0_bit)
    }
    if mask & (DV_I_44_0_bit | DV_II_54_0_bit | DV_II_56_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(38 as i32 as
                                                           isize) ^
                                                 *W.offset(40 as i32
                                                               as isize)) >>
                                                4 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_44_0_bit | DV_II_54_0_bit | DV_II_56_0_bit)
    }
    if mask & (DV_I_43_0_bit | DV_II_53_0_bit | DV_II_55_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(37 as i32 as
                                                           isize) ^
                                                 *W.offset(39 as i32
                                                               as isize)) >>
                                                4 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_43_0_bit | DV_II_53_0_bit | DV_II_55_0_bit)
    }
    mask &=
        (0 as i32 as
             u32).wrapping_sub((*W.offset(36 as i32 as isize)
                                             ^
                                             *W.offset(37 as i32 as
                                                           isize) >>
                                                 5 as i32) &
                                            ((1 as i32) <<
                                                 1 as i32) as
                                                u32) |
            !(DV_I_47_2_bit | DV_I_50_2_bit | DV_II_46_2_bit);
    if mask & (DV_I_45_0_bit | DV_I_48_0_bit | DV_II_47_0_bit) != 0 {
        mask &=
            ((*W.offset(35 as i32 as isize) >> 4 as i32 ^
                  *W.offset(39 as i32 as isize) >> 29 as i32)
                 &
                 1 as i32 as
                     u32).wrapping_sub(1 as i32 as
                                                    u32) |
                !(DV_I_45_0_bit | DV_I_48_0_bit | DV_II_47_0_bit)
    }
    if mask & (DV_I_48_0_bit | DV_II_48_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(63 as i32 as
                                                           isize) ^
                                                 *W.offset(64 as i32
                                                               as isize) >>
                                                     5 as i32) &
                                                ((1 as i32) <<
                                                     0 as i32) as
                                                    u32) |
                !(DV_I_48_0_bit | DV_II_48_0_bit)
    }
    if mask & (DV_I_45_0_bit | DV_II_45_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(63 as i32 as
                                                           isize) ^
                                                 *W.offset(64 as i32
                                                               as isize) >>
                                                     5 as i32) &
                                                ((1 as i32) <<
                                                     1 as i32) as
                                                    u32) |
                !(DV_I_45_0_bit | DV_II_45_0_bit)
    }
    if mask & (DV_I_47_0_bit | DV_II_47_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(62 as i32 as
                                                           isize) ^
                                                 *W.offset(63 as i32
                                                               as isize) >>
                                                     5 as i32) &
                                                ((1 as i32) <<
                                                     0 as i32) as
                                                    u32) |
                !(DV_I_47_0_bit | DV_II_47_0_bit)
    }
    if mask & (DV_I_46_0_bit | DV_II_46_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(61 as i32 as
                                                           isize) ^
                                                 *W.offset(62 as i32
                                                               as isize) >>
                                                     5 as i32) &
                                                ((1 as i32) <<
                                                     0 as i32) as
                                                    u32) |
                !(DV_I_46_0_bit | DV_II_46_0_bit)
    }
    mask &=
        (0 as i32 as
             u32).wrapping_sub((*W.offset(61 as i32 as isize)
                                             ^
                                             *W.offset(62 as i32 as
                                                           isize) >>
                                                 5 as i32) &
                                            ((1 as i32) <<
                                                 2 as i32) as
                                                u32) |
            !(DV_I_46_2_bit | DV_II_46_2_bit);
    if mask & (DV_I_45_0_bit | DV_II_45_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(60 as i32 as
                                                           isize) ^
                                                 *W.offset(61 as i32
                                                               as isize) >>
                                                     5 as i32) &
                                                ((1 as i32) <<
                                                     0 as i32) as
                                                    u32) |
                !(DV_I_45_0_bit | DV_II_45_0_bit)
    }
    if mask & (DV_II_51_0_bit | DV_II_54_0_bit) != 0 {
        mask &=
            ((*W.offset(58 as i32 as isize) ^
                  *W.offset(59 as i32 as isize)) >> 29 as i32
                 &
                 1 as i32 as
                     u32).wrapping_sub(1 as i32 as
                                                    u32) |
                !(DV_II_51_0_bit | DV_II_54_0_bit)
    }
    if mask & (DV_II_50_0_bit | DV_II_53_0_bit) != 0 {
        mask &=
            ((*W.offset(57 as i32 as isize) ^
                  *W.offset(58 as i32 as isize)) >> 29 as i32
                 &
                 1 as i32 as
                     u32).wrapping_sub(1 as i32 as
                                                    u32) |
                !(DV_II_50_0_bit | DV_II_53_0_bit)
    }
    if mask & (DV_II_52_0_bit | DV_II_54_0_bit) != 0 {
        mask &=
            ((*W.offset(56 as i32 as isize) ^
                  *W.offset(59 as i32 as isize) >> 25 as i32)
                 &
                 ((1 as i32) << 4 as i32) as
                     u32).wrapping_sub(((1 as i32) <<
                                                     4 as i32) as
                                                    u32) |
                !(DV_II_52_0_bit | DV_II_54_0_bit)
    }
    if mask & (DV_II_51_0_bit | DV_II_52_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(56 as i32 as
                                                           isize) ^
                                                 *W.offset(59 as i32
                                                               as isize)) >>
                                                29 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_II_51_0_bit | DV_II_52_0_bit)
    }
    if mask & (DV_II_49_0_bit | DV_II_52_0_bit) != 0 {
        mask &=
            ((*W.offset(56 as i32 as isize) ^
                  *W.offset(57 as i32 as isize)) >> 29 as i32
                 &
                 1 as i32 as
                     u32).wrapping_sub(1 as i32 as
                                                    u32) |
                !(DV_II_49_0_bit | DV_II_52_0_bit)
    }
    if mask & (DV_II_51_0_bit | DV_II_53_0_bit) != 0 {
        mask &=
            ((*W.offset(55 as i32 as isize) ^
                  *W.offset(58 as i32 as isize) >> 25 as i32)
                 &
                 ((1 as i32) << 4 as i32) as
                     u32).wrapping_sub(((1 as i32) <<
                                                     4 as i32) as
                                                    u32) |
                !(DV_II_51_0_bit | DV_II_53_0_bit)
    }
    if mask & (DV_II_50_0_bit | DV_II_52_0_bit) != 0 {
        mask &=
            ((*W.offset(54 as i32 as isize) ^
                  *W.offset(57 as i32 as isize) >> 25 as i32)
                 &
                 ((1 as i32) << 4 as i32) as
                     u32).wrapping_sub(((1 as i32) <<
                                                     4 as i32) as
                                                    u32) |
                !(DV_II_50_0_bit | DV_II_52_0_bit)
    }
    if mask & (DV_II_49_0_bit | DV_II_51_0_bit) != 0 {
        mask &=
            ((*W.offset(53 as i32 as isize) ^
                  *W.offset(56 as i32 as isize) >> 25 as i32)
                 &
                 ((1 as i32) << 4 as i32) as
                     u32).wrapping_sub(((1 as i32) <<
                                                     4 as i32) as
                                                    u32) |
                !(DV_II_49_0_bit | DV_II_51_0_bit)
    }
    mask &=
        ((*W.offset(51 as i32 as isize) ^
              *W.offset(50 as i32 as isize) >> 5 as i32) &
             ((1 as i32) << 1 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 1 as i32) as
                                                u32) |
            !(DV_I_50_2_bit | DV_II_46_2_bit);
    mask &=
        ((*W.offset(48 as i32 as isize) ^
              *W.offset(50 as i32 as isize)) &
             ((1 as i32) << 6 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 6 as i32) as
                                                u32) |
            !(DV_I_50_2_bit | DV_II_46_2_bit);
    if mask & (DV_I_51_0_bit | DV_I_52_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(48 as i32 as
                                                           isize) ^
                                                 *W.offset(55 as i32
                                                               as isize)) >>
                                                29 as i32 &
                                                1 as i32 as
                                                    u32) |
                !(DV_I_51_0_bit | DV_I_52_0_bit)
    }
    mask &=
        ((*W.offset(47 as i32 as isize) ^
              *W.offset(49 as i32 as isize)) &
             ((1 as i32) << 6 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 6 as i32) as
                                                u32) |
            !(DV_I_49_2_bit | DV_I_51_2_bit);
    mask &=
        ((*W.offset(48 as i32 as isize) ^
              *W.offset(47 as i32 as isize) >> 5 as i32) &
             ((1 as i32) << 1 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 1 as i32) as
                                                u32) |
            !(DV_I_47_2_bit | DV_II_51_2_bit);
    mask &=
        ((*W.offset(46 as i32 as isize) ^
              *W.offset(48 as i32 as isize)) &
             ((1 as i32) << 6 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 6 as i32) as
                                                u32) |
            !(DV_I_48_2_bit | DV_I_50_2_bit);
    mask &=
        ((*W.offset(47 as i32 as isize) ^
              *W.offset(46 as i32 as isize) >> 5 as i32) &
             ((1 as i32) << 1 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 1 as i32) as
                                                u32) |
            !(DV_I_46_2_bit | DV_II_50_2_bit);
    mask &=
        (0 as i32 as
             u32).wrapping_sub((*W.offset(44 as i32 as isize)
                                             ^
                                             *W.offset(45 as i32 as
                                                           isize) >>
                                                 5 as i32) &
                                            ((1 as i32) <<
                                                 1 as i32) as
                                                u32) |
            !(DV_I_51_2_bit | DV_II_49_2_bit);
    mask &=
        ((*W.offset(43 as i32 as isize) ^
              *W.offset(45 as i32 as isize)) &
             ((1 as i32) << 6 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 6 as i32) as
                                                u32) |
            !(DV_I_47_2_bit | DV_I_49_2_bit);
    mask &=
        ((*W.offset(42 as i32 as isize) ^
              *W.offset(44 as i32 as isize)) >> 6 as i32 &
             1 as i32 as
                 u32).wrapping_sub(1 as i32 as u32)
            | !(DV_I_46_2_bit | DV_I_48_2_bit);
    mask &=
        ((*W.offset(43 as i32 as isize) ^
              *W.offset(42 as i32 as isize) >> 5 as i32) &
             ((1 as i32) << 1 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 1 as i32) as
                                                u32) |
            !(DV_II_46_2_bit | DV_II_51_2_bit);
    mask &=
        ((*W.offset(42 as i32 as isize) ^
              *W.offset(41 as i32 as isize) >> 5 as i32) &
             ((1 as i32) << 1 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 1 as i32) as
                                                u32) |
            !(DV_I_51_2_bit | DV_II_50_2_bit);
    mask &=
        ((*W.offset(41 as i32 as isize) ^
              *W.offset(40 as i32 as isize) >> 5 as i32) &
             ((1 as i32) << 1 as i32) as
                 u32).wrapping_sub(((1 as i32) <<
                                                 1 as i32) as
                                                u32) |
            !(DV_I_50_2_bit | DV_II_49_2_bit);
    if mask & (DV_I_52_0_bit | DV_II_51_0_bit) != 0 {
        mask &=
            ((*W.offset(39 as i32 as isize) ^
                  *W.offset(43 as i32 as isize) >> 25 as i32)
                 &
                 ((1 as i32) << 4 as i32) as
                     u32).wrapping_sub(((1 as i32) <<
                                                     4 as i32) as
                                                    u32) |
                !(DV_I_52_0_bit | DV_II_51_0_bit)
    }
    if mask & (DV_I_51_0_bit | DV_II_50_0_bit) != 0 {
        mask &=
            ((*W.offset(38 as i32 as isize) ^
                  *W.offset(42 as i32 as isize) >> 25 as i32)
                 &
                 ((1 as i32) << 4 as i32) as
                     u32).wrapping_sub(((1 as i32) <<
                                                     4 as i32) as
                                                    u32) |
                !(DV_I_51_0_bit | DV_II_50_0_bit)
    }
    if mask & (DV_I_48_2_bit | DV_I_51_2_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(37 as i32 as
                                                           isize) ^
                                                 *W.offset(38 as i32
                                                               as isize) >>
                                                     5 as i32) &
                                                ((1 as i32) <<
                                                     1 as i32) as
                                                    u32) |
                !(DV_I_48_2_bit | DV_I_51_2_bit)
    }
    if mask & (DV_I_50_0_bit | DV_II_49_0_bit) != 0 {
        mask &=
            ((*W.offset(37 as i32 as isize) ^
                  *W.offset(41 as i32 as isize) >> 25 as i32)
                 &
                 ((1 as i32) << 4 as i32) as
                     u32).wrapping_sub(((1 as i32) <<
                                                     4 as i32) as
                                                    u32) |
                !(DV_I_50_0_bit | DV_II_49_0_bit)
    }
    if mask & (DV_II_52_0_bit | DV_II_54_0_bit) != 0 {
        mask &=
            (0 as i32 as
                 u32).wrapping_sub((*W.offset(36 as i32 as
                                                           isize) ^
                                                 *W.offset(38 as i32
                                                               as isize)) &
                                                ((1 as i32) <<
                                                     4 as i32) as
                                                    u32) |
                !(DV_II_52_0_bit | DV_II_54_0_bit)
    }
    mask &=
        (0 as i32 as
             u32).wrapping_sub((*W.offset(35 as i32 as isize)
                                             ^
                                             *W.offset(36 as i32 as
                                                           isize) >>
                                                 5 as i32) &
                                            ((1 as i32) <<
                                                 1 as i32) as
                                                u32) |
            !(DV_I_46_2_bit | DV_I_49_2_bit);
    if mask & (DV_I_51_0_bit | DV_II_47_0_bit) != 0 {
        mask &=
            ((*W.offset(35 as i32 as isize) ^
                  *W.offset(39 as i32 as isize) >> 25 as i32)
                 &
                 ((1 as i32) << 3 as i32) as
                     u32).wrapping_sub(((1 as i32) <<
                                                     3 as i32) as
                                                    u32) |
                !(DV_I_51_0_bit | DV_II_47_0_bit)
    }
    if mask != 0 {
        if mask & DV_I_43_0_bit != 0 {
            if (*W.offset(61 as i32 as isize) ^
                    *W.offset(62 as i32 as isize) >> 5 as i32)
                   & ((1 as i32) << 1 as i32) as u32
                   == 0 ||
                   (*W.offset(59 as i32 as isize) ^
                        *W.offset(63 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 5 as i32) as
                           u32 != 0 ||
                   (*W.offset(58 as i32 as isize) ^
                        *W.offset(63 as i32 as isize) >>
                            30 as i32) &
                       ((1 as i32) << 0 as i32) as
                           u32 == 0 {
                mask &= !DV_I_43_0_bit
            }
        }
        if mask & DV_I_44_0_bit != 0 {
            if (*W.offset(62 as i32 as isize) ^
                    *W.offset(63 as i32 as isize) >> 5 as i32)
                   & ((1 as i32) << 1 as i32) as u32
                   == 0 ||
                   (*W.offset(60 as i32 as isize) ^
                        *W.offset(64 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 5 as i32) as
                           u32 != 0 ||
                   (*W.offset(59 as i32 as isize) ^
                        *W.offset(64 as i32 as isize) >>
                            30 as i32) &
                       ((1 as i32) << 0 as i32) as
                           u32 == 0 {
                mask &= !DV_I_44_0_bit
            }
        }
        if mask & DV_I_46_2_bit != 0 {
            mask &=
                !((*W.offset(40 as i32 as isize) ^
                       *W.offset(42 as i32 as isize)) >>
                      2 as i32) | !DV_I_46_2_bit
        }
        if mask & DV_I_47_2_bit != 0 {
            if (*W.offset(62 as i32 as isize) ^
                    *W.offset(63 as i32 as isize) >> 5 as i32)
                   & ((1 as i32) << 2 as i32) as u32
                   == 0 ||
                   (*W.offset(41 as i32 as isize) ^
                        *W.offset(43 as i32 as isize)) &
                       ((1 as i32) << 6 as i32) as
                           u32 != 0 {
                mask &= !DV_I_47_2_bit
            }
        }
        if mask & DV_I_48_2_bit != 0 {
            if (*W.offset(63 as i32 as isize) ^
                    *W.offset(64 as i32 as isize) >> 5 as i32)
                   & ((1 as i32) << 2 as i32) as u32
                   == 0 ||
                   (*W.offset(48 as i32 as isize) ^
                        *W.offset(49 as i32 as isize) <<
                            5 as i32) &
                       ((1 as i32) << 6 as i32) as
                           u32 != 0 {
                mask &= !DV_I_48_2_bit
            }
        }
        if mask & DV_I_49_2_bit != 0 {
            if (*W.offset(49 as i32 as isize) ^
                    *W.offset(50 as i32 as isize) << 5 as i32)
                   & ((1 as i32) << 6 as i32) as u32
                   != 0 ||
                   (*W.offset(42 as i32 as isize) ^
                        *W.offset(50 as i32 as isize)) &
                       ((1 as i32) << 1 as i32) as
                           u32 == 0 ||
                   (*W.offset(39 as i32 as isize) ^
                        *W.offset(40 as i32 as isize) <<
                            5 as i32) &
                       ((1 as i32) << 6 as i32) as
                           u32 != 0 ||
                   (*W.offset(38 as i32 as isize) ^
                        *W.offset(40 as i32 as isize)) &
                       ((1 as i32) << 1 as i32) as
                           u32 == 0 {
                mask &= !DV_I_49_2_bit
            }
        }
        if mask & DV_I_50_0_bit != 0 {
            mask &=
                (*W.offset(36 as i32 as isize) ^
                     *W.offset(37 as i32 as isize)) <<
                    7 as i32 | !DV_I_50_0_bit
        }
        if mask & DV_I_50_2_bit != 0 {
            mask &=
                (*W.offset(43 as i32 as isize) ^
                     *W.offset(51 as i32 as isize)) <<
                    11 as i32 | !DV_I_50_2_bit
        }
        if mask & DV_I_51_0_bit != 0 {
            mask &=
                (*W.offset(37 as i32 as isize) ^
                     *W.offset(38 as i32 as isize)) <<
                    9 as i32 | !DV_I_51_0_bit
        }
        if mask & DV_I_51_2_bit != 0 {
            if (*W.offset(51 as i32 as isize) ^
                    *W.offset(52 as i32 as isize) << 5 as i32)
                   & ((1 as i32) << 6 as i32) as u32
                   != 0 ||
                   (*W.offset(49 as i32 as isize) ^
                        *W.offset(51 as i32 as isize)) &
                       ((1 as i32) << 6 as i32) as
                           u32 != 0 ||
                   (*W.offset(37 as i32 as isize) ^
                        *W.offset(37 as i32 as isize) >>
                            5 as i32) &
                       ((1 as i32) << 1 as i32) as
                           u32 != 0 ||
                   (*W.offset(35 as i32 as isize) ^
                        *W.offset(39 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 5 as i32) as
                           u32 != 0 {
                mask &= !DV_I_51_2_bit
            }
        }
        if mask & DV_I_52_0_bit != 0 {
            mask &=
                (*W.offset(38 as i32 as isize) ^
                     *W.offset(39 as i32 as isize)) <<
                    11 as i32 | !DV_I_52_0_bit
        }
        if mask & DV_II_46_2_bit != 0 {
            mask &=
                (*W.offset(47 as i32 as isize) ^
                     *W.offset(51 as i32 as isize)) <<
                    17 as i32 | !DV_II_46_2_bit
        }
        if mask & DV_II_48_0_bit != 0 {
            if (*W.offset(36 as i32 as isize) ^
                    *W.offset(40 as i32 as isize) >>
                        25 as i32) &
                   ((1 as i32) << 3 as i32) as u32 !=
                   0 ||
                   (*W.offset(35 as i32 as isize) ^
                        *W.offset(40 as i32 as isize) <<
                            2 as i32) &
                       ((1 as i32) << 30 as i32) as
                           u32 == 0 {
                mask &= !DV_II_48_0_bit
            }
        }
        if mask & DV_II_49_0_bit != 0 {
            if (*W.offset(37 as i32 as isize) ^
                    *W.offset(41 as i32 as isize) >>
                        25 as i32) &
                   ((1 as i32) << 3 as i32) as u32 !=
                   0 ||
                   (*W.offset(36 as i32 as isize) ^
                        *W.offset(41 as i32 as isize) <<
                            2 as i32) &
                       ((1 as i32) << 30 as i32) as
                           u32 == 0 {
                mask &= !DV_II_49_0_bit
            }
        }
        if mask & DV_II_49_2_bit != 0 {
            if (*W.offset(53 as i32 as isize) ^
                    *W.offset(54 as i32 as isize) << 5 as i32)
                   & ((1 as i32) << 6 as i32) as u32
                   != 0 ||
                   (*W.offset(51 as i32 as isize) ^
                        *W.offset(53 as i32 as isize)) &
                       ((1 as i32) << 6 as i32) as
                           u32 != 0 ||
                   (*W.offset(50 as i32 as isize) ^
                        *W.offset(54 as i32 as isize)) &
                       ((1 as i32) << 1 as i32) as
                           u32 == 0 ||
                   (*W.offset(45 as i32 as isize) ^
                        *W.offset(46 as i32 as isize) <<
                            5 as i32) &
                       ((1 as i32) << 6 as i32) as
                           u32 != 0 ||
                   (*W.offset(37 as i32 as isize) ^
                        *W.offset(41 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 5 as i32) as
                           u32 != 0 ||
                   (*W.offset(36 as i32 as isize) ^
                        *W.offset(41 as i32 as isize) >>
                            30 as i32) &
                       ((1 as i32) << 0 as i32) as
                           u32 == 0 {
                mask &= !DV_II_49_2_bit
            }
        }
        if mask & DV_II_50_0_bit != 0 {
            if (*W.offset(55 as i32 as isize) ^
                    *W.offset(58 as i32 as isize)) &
                   ((1 as i32) << 29 as i32) as u32
                   == 0 ||
                   (*W.offset(38 as i32 as isize) ^
                        *W.offset(42 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 3 as i32) as
                           u32 != 0 ||
                   (*W.offset(37 as i32 as isize) ^
                        *W.offset(42 as i32 as isize) <<
                            2 as i32) &
                       ((1 as i32) << 30 as i32) as
                           u32 == 0 {
                mask &= !DV_II_50_0_bit
            }
        }
        if mask & DV_II_50_2_bit != 0 {
            if (*W.offset(54 as i32 as isize) ^
                    *W.offset(55 as i32 as isize) << 5 as i32)
                   & ((1 as i32) << 6 as i32) as u32
                   != 0 ||
                   (*W.offset(52 as i32 as isize) ^
                        *W.offset(54 as i32 as isize)) &
                       ((1 as i32) << 6 as i32) as
                           u32 != 0 ||
                   (*W.offset(51 as i32 as isize) ^
                        *W.offset(55 as i32 as isize)) &
                       ((1 as i32) << 1 as i32) as
                           u32 == 0 ||
                   (*W.offset(45 as i32 as isize) ^
                        *W.offset(47 as i32 as isize)) &
                       ((1 as i32) << 1 as i32) as
                           u32 == 0 ||
                   (*W.offset(38 as i32 as isize) ^
                        *W.offset(42 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 5 as i32) as
                           u32 != 0 ||
                   (*W.offset(37 as i32 as isize) ^
                        *W.offset(42 as i32 as isize) >>
                            30 as i32) &
                       ((1 as i32) << 0 as i32) as
                           u32 == 0 {
                mask &= !DV_II_50_2_bit
            }
        }
        if mask & DV_II_51_0_bit != 0 {
            if (*W.offset(39 as i32 as isize) ^
                    *W.offset(43 as i32 as isize) >>
                        25 as i32) &
                   ((1 as i32) << 3 as i32) as u32 !=
                   0 ||
                   (*W.offset(38 as i32 as isize) ^
                        *W.offset(43 as i32 as isize) <<
                            2 as i32) &
                       ((1 as i32) << 30 as i32) as
                           u32 == 0 {
                mask &= !DV_II_51_0_bit
            }
        }
        if mask & DV_II_51_2_bit != 0 {
            if (*W.offset(55 as i32 as isize) ^
                    *W.offset(56 as i32 as isize) << 5 as i32)
                   & ((1 as i32) << 6 as i32) as u32
                   != 0 ||
                   (*W.offset(53 as i32 as isize) ^
                        *W.offset(55 as i32 as isize)) &
                       ((1 as i32) << 6 as i32) as
                           u32 != 0 ||
                   (*W.offset(52 as i32 as isize) ^
                        *W.offset(56 as i32 as isize)) &
                       ((1 as i32) << 1 as i32) as
                           u32 == 0 ||
                   (*W.offset(46 as i32 as isize) ^
                        *W.offset(48 as i32 as isize)) &
                       ((1 as i32) << 1 as i32) as
                           u32 == 0 ||
                   (*W.offset(39 as i32 as isize) ^
                        *W.offset(43 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 5 as i32) as
                           u32 != 0 ||
                   (*W.offset(38 as i32 as isize) ^
                        *W.offset(43 as i32 as isize) >>
                            30 as i32) &
                       ((1 as i32) << 0 as i32) as
                           u32 == 0 {
                mask &= !DV_II_51_2_bit
            }
        }
        if mask & DV_II_52_0_bit != 0 {
            if (*W.offset(59 as i32 as isize) ^
                    *W.offset(60 as i32 as isize)) &
                   ((1 as i32) << 29 as i32) as u32
                   != 0 ||
                   (*W.offset(40 as i32 as isize) ^
                        *W.offset(44 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 3 as i32) as
                           u32 != 0 ||
                   (*W.offset(40 as i32 as isize) ^
                        *W.offset(44 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 4 as i32) as
                           u32 != 0 ||
                   (*W.offset(39 as i32 as isize) ^
                        *W.offset(44 as i32 as isize) <<
                            2 as i32) &
                       ((1 as i32) << 30 as i32) as
                           u32 == 0 {
                mask &= !DV_II_52_0_bit
            }
        }
        if mask & DV_II_53_0_bit != 0 {
            if (*W.offset(58 as i32 as isize) ^
                    *W.offset(61 as i32 as isize)) &
                   ((1 as i32) << 29 as i32) as u32
                   == 0 ||
                   (*W.offset(57 as i32 as isize) ^
                        *W.offset(61 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 4 as i32) as
                           u32 != 0 ||
                   (*W.offset(41 as i32 as isize) ^
                        *W.offset(45 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 3 as i32) as
                           u32 != 0 ||
                   (*W.offset(41 as i32 as isize) ^
                        *W.offset(45 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 4 as i32) as
                           u32 != 0 {
                mask &= !DV_II_53_0_bit
            }
        }
        if mask & DV_II_54_0_bit != 0 {
            if (*W.offset(58 as i32 as isize) ^
                    *W.offset(62 as i32 as isize) >>
                        25 as i32) &
                   ((1 as i32) << 4 as i32) as u32 !=
                   0 ||
                   (*W.offset(42 as i32 as isize) ^
                        *W.offset(46 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 3 as i32) as
                           u32 != 0 ||
                   (*W.offset(42 as i32 as isize) ^
                        *W.offset(46 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 4 as i32) as
                           u32 != 0 {
                mask &= !DV_II_54_0_bit
            }
        }
        if mask & DV_II_55_0_bit != 0 {
            if (*W.offset(59 as i32 as isize) ^
                    *W.offset(63 as i32 as isize) >>
                        25 as i32) &
                   ((1 as i32) << 4 as i32) as u32 !=
                   0 ||
                   (*W.offset(57 as i32 as isize) ^
                        *W.offset(59 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 4 as i32) as
                           u32 != 0 ||
                   (*W.offset(43 as i32 as isize) ^
                        *W.offset(47 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 3 as i32) as
                           u32 != 0 ||
                   (*W.offset(43 as i32 as isize) ^
                        *W.offset(47 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 4 as i32) as
                           u32 != 0 {
                mask &= !DV_II_55_0_bit
            }
        }
        if mask & DV_II_56_0_bit != 0 {
            if (*W.offset(60 as i32 as isize) ^
                    *W.offset(64 as i32 as isize) >>
                        25 as i32) &
                   ((1 as i32) << 4 as i32) as u32 !=
                   0 ||
                   (*W.offset(44 as i32 as isize) ^
                        *W.offset(48 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 3 as i32) as
                           u32 != 0 ||
                   (*W.offset(44 as i32 as isize) ^
                        *W.offset(48 as i32 as isize) >>
                            25 as i32) &
                       ((1 as i32) << 4 as i32) as
                           u32 != 0 {
                mask &= !DV_II_56_0_bit
            }
        }
    }
    *dvmask.offset(0 as i32 as isize) = mask;
}
