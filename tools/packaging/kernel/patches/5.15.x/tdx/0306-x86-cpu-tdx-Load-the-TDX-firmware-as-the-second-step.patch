From 86e58542f2e02991cdd3adbc7a77c569f5116c1c Mon Sep 17 00:00:00 2001
From: Isaku Yamahata <isaku.yamahata@intel.com>
Date: Thu, 2 Sep 2021 04:06:18 -0700
Subject: [PATCH 0306/1418] x86/cpu/tdx: Load the TDX firmware as the second
 step

Loading the TDX module firmware requires a signature structure to verify
the TDX module has not been maliciously tampered.  Loading TDX module
requires to call P-SEAMLDR SEAMCALL on all logical CPUs on the platform,
passing the firmware module and signature structure as input.

If the necessary CPU feature, CPU SEAM mode, is available, try to find the
TDX module and its signature file in the built-in firmware or initrd.  If
they're both found, load the TDX module into the isolated memory range.

Co-developed-by: Sean Christopherson <sean.j.christopherson@intel.com>
Signed-off-by: Sean Christopherson <sean.j.christopherson@intel.com>
Co-developed-by: Kai Huang <kai.huang@intel.com>
Signed-off-by: Kai Huang <kai.huang@intel.com>
Signed-off-by: Isaku Yamahata <isaku.yamahata@intel.com>
---
 .../admin-guide/kernel-parameters.txt         |  14 +
 arch/x86/include/asm/cpufeatures.h            |   1 +
 arch/x86/kernel/cpu/tdx/p-seamldr.c           |  15 +
 arch/x86/kernel/cpu/tdx/p-seamldr.h           |  19 +
 arch/x86/kernel/cpu/tdx/tdx.c                 | 328 ++++++++++++++++++
 5 files changed, 377 insertions(+)

diff --git a/Documentation/admin-guide/kernel-parameters.txt b/Documentation/admin-guide/kernel-parameters.txt
index dfa4e0dd7eef..d349672e373a 100644
--- a/Documentation/admin-guide/kernel-parameters.txt
+++ b/Documentation/admin-guide/kernel-parameters.txt
@@ -5660,6 +5660,20 @@
 			Default value is "off".  Unknown value is treated
 			as "off".
 
+	tdx_module=     [X86-64, TDX]
+			Name of TDX module to load.
+			Default value is "intel-seam/libtdx.so".
+                        It searches for <filename> in builtin firmwares and if
+                        it failed, it searches in initrd for
+                        lib/firmware/<filename> and usr/lib/firmware/<filename>.
+
+	tdx_sigstruct=  [X86-64, TDX]
+			Name of sigstruct of TDX module to load.
+			Default value is "intel-seam/libtdx.so.sigstruct".
+                        It searches for <filename> in builtin firmwares and if
+                        it failed, it searches in initrd for
+                        lib/firmware/<filename> and usr/lib/firmware/<filename>.
+
 	test_suspend=	[SUSPEND][,N]
 			Specify "mem" (for Suspend-to-RAM) or "standby" (for
 			standby suspend) or "freeze" (for suspend type freeze)
diff --git a/arch/x86/include/asm/cpufeatures.h b/arch/x86/include/asm/cpufeatures.h
index 12f90867725c..15ffa2638a95 100644
--- a/arch/x86/include/asm/cpufeatures.h
+++ b/arch/x86/include/asm/cpufeatures.h
@@ -230,6 +230,7 @@
 #define X86_FEATURE_FLEXPRIORITY	( 8*32+ 2) /* Intel FlexPriority */
 #define X86_FEATURE_EPT			( 8*32+ 3) /* Intel Extended Page Table */
 #define X86_FEATURE_VPID		( 8*32+ 4) /* Intel Virtual Processor ID */
+#define X86_FEATURE_SEAM		( 8*32+ 5) /* "" Secure Arbitration Mode */
 
 #define X86_FEATURE_VMMCALL		( 8*32+15) /* Prefer VMMCALL to VMCALL */
 #define X86_FEATURE_XENPV		( 8*32+16) /* "" Xen paravirtual guest */
diff --git a/arch/x86/kernel/cpu/tdx/p-seamldr.c b/arch/x86/kernel/cpu/tdx/p-seamldr.c
index 0352861b24dd..18a7c8d70a47 100644
--- a/arch/x86/kernel/cpu/tdx/p-seamldr.c
+++ b/arch/x86/kernel/cpu/tdx/p-seamldr.c
@@ -51,6 +51,20 @@ int seamldr_info(phys_addr_t seamldr_info)
 	return 0;
 }
 
+int seamldr_install(phys_addr_t seamldr_params)
+{
+	u64 ret;
+
+	ret = seamcall(SEAMCALL_SEAMLDR_INSTALL, seamldr_params, 0, 0, 0, NULL);
+	if (ret) {
+		pr_err_ratelimited(
+			"SEAMCALL[SEAMLDR_INSTALL] failed %s (0x%llx)\n",
+			p_seamldr_error_name(ret), ret);
+		return -EIO;
+	}
+	return 0;
+}
+
 /*
  * is_seamrr_enabled - check if seamrr is supported.
  */
@@ -431,6 +445,7 @@ int __init load_p_seamldr(void)
 		return err;
 	}
 
+	setup_force_cpu_cap(X86_FEATURE_SEAM);
 	pr_info("Successfully loaded TDX P-SEAMLDR.\n");
 	return 0;
 }
diff --git a/arch/x86/kernel/cpu/tdx/p-seamldr.h b/arch/x86/kernel/cpu/tdx/p-seamldr.h
index 8e212618fd3d..3a461814d727 100644
--- a/arch/x86/kernel/cpu/tdx/p-seamldr.h
+++ b/arch/x86/kernel/cpu/tdx/p-seamldr.h
@@ -32,6 +32,7 @@ const char *p_seamldr_error_name(u64 error_code);
  */
 #define SEAMCALL_SEAMLDR_BASE		BIT_ULL(63)
 #define SEAMCALL_SEAMLDR_INFO		SEAMCALL_SEAMLDR_BASE
+#define SEAMCALL_SEAMLDR_INSTALL	(SEAMCALL_SEAMLDR_BASE | 1)
 
 struct tee_tcb_svn {
 	u16 seam;
@@ -70,8 +71,26 @@ struct p_seamldr_info {
 	u8 reserved2[88];
 } __packed __aligned(P_SEAMLDR_INFO_ALIGNMENT);
 
+#define SEAMLDR_PARAMS_ALIGNMENT	PAGE_SIZE
+/* SEAM signature structure must be 0x200 DWORDS, which is 2048 bytes. */
+#define SEAMLDR_SIGSTRUCT_SIZE		2048
+
+#define SEAMLDR_SCENARIO_LOAD		0	/* Load TDX module */
+#define SEAMLDR_SCENARIO_UPDATE		1	/* Update a previously loaded module */
+
+#define SEAMLDR_MAX_NR_MODULE_PAGES	496
+
+struct seamldr_params {
+	u32 version;
+	u32 scenario;
+	u64 sigstruct_pa;
+	u8 reserved[104];
+	u64 num_module_pages;
+	u64 mod_pages_pa_list[SEAMLDR_MAX_NR_MODULE_PAGES];
+} __packed __aligned(SEAMLDR_PARAMS_ALIGNMENT);
 
 int seamldr_info(phys_addr_t seamldr_info);
+int seamldr_install(phys_addr_t seamldr_params);
 
 int __init load_p_seamldr(void);
 
diff --git a/arch/x86/kernel/cpu/tdx/tdx.c b/arch/x86/kernel/cpu/tdx/tdx.c
index d3158dbf65c9..fed837b92ef0 100644
--- a/arch/x86/kernel/cpu/tdx/tdx.c
+++ b/arch/x86/kernel/cpu/tdx/tdx.c
@@ -3,9 +3,20 @@
 
 #define pr_fmt(fmt) "tdx: " fmt
 
+#include <linux/earlycpio.h>
+#include <linux/memblock.h>
+#include <linux/kernel.h>
 #include <linux/init.h>
+#include <linux/slab.h>
+#include <linux/cpu.h>
 
+#include <asm/tdx_host.h>
+#include <asm/virtext.h>
+#include <asm/apic.h>
+
+#include "seamcall.h"
 #include "p-seamldr.h"
+#include "seam.h"
 
 enum TDX_HOST_OPTION {
 	TDX_HOST_OFF,
@@ -35,3 +46,320 @@ static int __init tdx_host_early_init(void)
 	return ret;
 }
 early_initcall(tdx_host_early_init);
+
+static char *tdx_module_name __initdata = "intel-seam/libtdx.so";
+static size_t tdx_module_len __initdata;
+static char *tdx_sigstruct_name __initdata = "intel-seam/libtdx.so.sigstruct";
+static size_t tdx_sigstruct_len;
+
+static int __init setup_tdx_module(char *str)
+{
+	tdx_module_len = strlen(str) + 1;
+	tdx_module_name = memblock_alloc(tdx_module_len, 0);
+	if (!tdx_module_name) {
+		tdx_module_len = 0;
+		return -ENOMEM;
+	}
+
+	strscpy(tdx_module_name, str, tdx_module_len);
+	return 1;
+}
+__setup("tdx_module=", setup_tdx_module);
+
+static int __init setup_tdx_sigstruct(char *str)
+{
+	tdx_sigstruct_len = strlen(str) + 1;
+	tdx_sigstruct_name = memblock_alloc(tdx_sigstruct_len, 0);
+	if (!tdx_sigstruct_name) {
+		tdx_sigstruct_len = 0;
+		return -ENOMEM;
+	}
+
+	strscpy(tdx_sigstruct_name, str, tdx_sigstruct_len);
+	return 1;
+}
+__setup("tdx_sigstruct=", setup_tdx_sigstruct);
+
+/*
+ * runtime update of TDX module is future task.  Track state of TDX module as
+ * preliminary and export the state via sysfs for admin.
+ */
+enum TDX_MODULE_STATE {
+	TDX_MODULE_NOT_LOADED = 0,
+	/*
+	 * The TDX module is loaded into SEAM region.  Not functional yet until
+	 * initialization is done.
+	 */
+	TDX_MODULE_LOADED,
+	/* Initialization is done so that the TDX module is functional. */
+	TDX_MODULE_INITIALIZED,
+	/*
+	 * No SEAMCALLs are allowed so that the TDX module is not functional.
+	 * It's ready for P-SEAMLDR to update the TDX module.  As something went
+	 * wrong, a system reboot would be needed to fix it.
+	 */
+	TDX_MODULE_ERROR,
+};
+
+/* TODO: export the state via sysfs. */
+static enum TDX_MODULE_STATE tdx_module_state __ro_after_init;
+
+/*
+ * free_seamldr_params - free allocated for seamldr_params including referenced
+ *			 pages by params.
+ * @params: virtual address of struct seamldr_params to free
+ */
+static void __init free_seamldr_params(struct seamldr_params *params)
+{
+	int i;
+
+	if (!params)
+		return;
+
+	for (i = 0; i < params->num_module_pages; i++)
+		free_page((unsigned long)__va(params->mod_pages_pa_list[i]));
+	free_page((unsigned long)__va(params->sigstruct_pa));
+	free_page((unsigned long)params);
+}
+
+/*
+ * alloc_seamldr_params - initialize parameters for P-SEAMLDR to load TDX module.
+ * @module: virtual address of TDX module.
+ * @module_size: size of module.
+ * @sigstruct: virtual address of sigstruct of TDX module.
+ * @sigstruct_size: size of sigstruct of TDX module.
+ * @scenario: SEAMLDR_SCENARIO_LOAD or SEAMLDR_SCENARIO_UPDATE.
+ * @return: pointer to struct seamldr_params on success, error code on failure.
+ *
+ * Allocate and initialize struct seamldr_params for P-SEAMLDR to load TDX
+ * module.  Memory for seamldr_params and members is required to be 4K
+ * page-aligned.  Use free_seamldr_params() to free allocated pages including
+ * referenced by params.
+ *
+ * KASAN thinks memcpy from initrd image via cpio image invalid access.
+ * Here module and sigstruct come from initrd image, not from memory allocator.
+ * Annotate it with __no_sanitize_address to apiece KASAN.
+ */
+static struct seamldr_params * __init __no_sanitize_address alloc_seamldr_params(
+	const void *module, unsigned long module_size, const void *sigstruct,
+	unsigned long sigstruct_size, u64 scenario)
+{
+	struct seamldr_params *params = NULL;
+	void *sigstruct_page = NULL;
+	void *module_page = NULL;
+	int i;
+
+	BUILD_BUG_ON(SEAMLDR_SIGSTRUCT_SIZE > PAGE_SIZE);
+
+	/*
+	 * SEAM module must be equal or less than
+	 * SEAMLDR_MAX_NR_MODULE_PAGES(496) pages.
+	 */
+	if (!module_size ||
+	    module_size > SEAMLDR_MAX_NR_MODULE_PAGES * PAGE_SIZE) {
+		pr_err("Invalid SEAM module size 0x%lx\n", module_size);
+		return ERR_PTR(-EINVAL);
+	}
+	/*
+	 * SEAM signature structure must be SEAMLDR_SIGSTRUCT_SIZE(2048) bytes.
+	 */
+	if (sigstruct_size != SEAMLDR_SIGSTRUCT_SIZE) {
+		pr_err("Invalid SEAM signature structure size 0x%lx\n",
+		       sigstruct_size);
+		return ERR_PTR(-EINVAL);
+	}
+
+	/*
+	 * Allocate and initialize the SEAMLDR params.  Pages are passed in as
+	 * a list of physical addresses.
+	 */
+	params = (struct seamldr_params *)get_zeroed_page(GFP_KERNEL);
+	if (!params) {
+		pr_err("Unable to allocate memory for SEAMLDR_PARAMS\n");
+		goto out;
+	}
+	params->scenario = scenario;
+
+	/* SEAMLDR requires the sigstruct to be 4K aligned. */
+	sigstruct_page = (void *)__get_free_page(GFP_KERNEL);
+	if (!sigstruct_page) {
+		pr_err("Unable to allocate memory to copy sigstruct\n");
+		goto out;
+	}
+	memcpy(sigstruct_page, sigstruct, sigstruct_size);
+	params->sigstruct_pa = __pa(sigstruct_page);
+
+	params->num_module_pages = PFN_UP(module_size);
+	for (i = 0; i < params->num_module_pages; i++) {
+		module_page = (void *)__get_free_page(GFP_KERNEL);
+		if (!module_page) {
+			pr_err("Unable to allocate memory to copy SEAM module\n");
+			goto out;
+		}
+		params->mod_pages_pa_list[i] = __pa(module_page);
+		memcpy(module_page, module + i * PAGE_SIZE,
+		       min(module_size, PAGE_SIZE));
+		if (module_size < PAGE_SIZE)
+			memset(module_page + module_size, 0,
+			       PAGE_SIZE - module_size);
+		module_size -= PAGE_SIZE;
+	}
+
+	return params;
+
+out:
+	free_seamldr_params(params);
+	return ERR_PTR(-ENOMEM);
+}
+
+struct tdx_install_module_data {
+	struct seamldr_params *params;
+	atomic_t error;
+};
+
+/* Load seam module on one CPU */
+static void __init tdx_install_module_cpu(void *data)
+{
+	struct tdx_install_module_data *install_module = data;
+	int ret = seamldr_install(__pa(install_module->params));
+
+	if (ret)
+		atomic_set(&install_module->error, ret);
+}
+
+/*
+ * tdx_install_module - load TDX module by P-SEAMLDR seam_install call.
+ * @module: virtual address of TDX module.
+ * @module_size: size of TDX module.
+ * @sigstruct: virtual address of sigstruct of TDX module.
+ * @sigstruct_size: size of sigstruct of TDX module.
+ * @scenario: SEAMLDR_SCENARIO_LOAD or SEAMLDR_SCENARIO_UPDATE.
+ * @return: 0 on success, error code on failure.
+ *
+ * load TDX module on all CPUs through P-SEAMLDR and does get system info about
+ * TDX module.
+ */
+static int __init tdx_load_module(
+	const void *module, unsigned long module_size, const void *sigstruct,
+	unsigned long sigstruct_size, u64 scenario)
+{
+	struct seamldr_params *params;
+	struct tdx_install_module_data install_module;
+	int cpu;
+	int ret = 0;
+
+	params = alloc_seamldr_params(module, module_size, sigstruct,
+				      sigstruct_size, scenario);
+	if (IS_ERR(params))
+		return -ENOMEM;
+
+	install_module.params = params;
+	atomic_set(&install_module.error, 0);
+	/*
+	 * Call the function on each CPUs one by one to avoid NMI watchdog.  If
+	 * there are many CPUs, tdx_install_module_cpu() may contend with the
+	 * spinlock of seamldr_install() for long time to trigger NMI watchdog.
+	 */
+	for_each_online_cpu(cpu) {
+		smp_call_function_single(cpu, tdx_install_module_cpu,
+					&install_module, 1);
+		/* don't care what exact error occurred on which cpus. */
+		ret = atomic_read(&install_module.error);
+		if (ret)
+			goto out;
+	}
+
+	/* TODO: Early initialization. */
+
+out:
+	free_seamldr_params(params);
+	return ret;
+}
+
+/*
+ * Look for seam module binary in built-in firmware and initrd, and load it on
+ * all CPUs through P-SEAMLDR.
+ */
+static int __init tdx_arch_init(void)
+{
+	struct cpio_data module, sigstruct;
+	int vmxoff_err;
+	int ret = 0;
+
+	if (!boot_cpu_has(X86_FEATURE_SEAM))
+		goto out_free;
+
+	pr_info("Loading TDX module via P-SEAMLDR with %s and %s\n",
+		tdx_module_name, tdx_sigstruct_name);
+
+	ret = -EINVAL;
+	if (!seam_get_firmware(&module, tdx_module_name) ||
+	    !seam_get_firmware(&sigstruct, tdx_sigstruct_name)) {
+		ret = -ENOENT;
+		goto out_free;
+	}
+
+	/*
+	 * Because smp is enabled, prevent potential concurrent cpu
+	 * online/offline.
+	 */
+	cpus_read_lock();
+
+	/*
+	 * Initialization of TDX module needs to involve all CPUs.  Ensure all
+	 * CPUs are online.  All CPUs are required to be initialized by
+	 * TDH.SYS.LP.INIT otherwise TDH.SYS.CONFIG fails.
+	 */
+	if (!cpumask_equal(cpu_present_mask, cpu_online_mask)) {
+		ret = -EINVAL;
+		goto out;
+	}
+
+	/* SEAMCALL requires to enable VMXON on CPUs. */
+	ret = seam_alloc_init_vmcs_tmp_set();
+	if (ret)
+		goto out;
+	ret = seam_vmxon_on_each_cpu();
+	if (ret)
+		goto out;
+
+	ret = tdx_load_module(module.data, module.size,
+			sigstruct.data, sigstruct.size, SEAMLDR_SCENARIO_LOAD);
+	if (ret) {
+		pr_info("Failed to load TDX module.\n");
+		goto out;
+	}
+	pr_info("Loaded TDX module via P-SEAMLDR.\n");
+	tdx_module_state = TDX_MODULE_LOADED;
+
+out:
+	/*
+	 * Other codes (Especially kvm_intel) expect that they're the first to
+	 * use VMX.  That is, VMX is off on their initialization.  Maintain the
+	 * assumption to keep them working.
+	 */
+	vmxoff_err = seam_vmxoff_on_each_cpu();
+	if (vmxoff_err) {
+		pr_info("Failed to VMXOFF.\n");
+		if (!ret)
+			ret = vmxoff_err;
+	}
+	if (ret)
+		tdx_module_state = TDX_MODULE_ERROR;
+	cpus_read_unlock();
+
+	seam_free_vmcs_tmp_set();
+
+out_free:
+	if (tdx_module_len)
+		memblock_free_late(__pa(tdx_module_name), tdx_module_len);
+	if (tdx_sigstruct_len)
+		memblock_free_late(__pa(tdx_sigstruct_name), tdx_sigstruct_len);
+	return ret;
+}
+/*
+ * arch_initcall() is chosen to satisfy the following conditions.
+ * - After P-SEAMLDR is loaded.
+ * - After SMP initialization.
+ */
+arch_initcall(tdx_arch_init);
-- 
2.31.1

