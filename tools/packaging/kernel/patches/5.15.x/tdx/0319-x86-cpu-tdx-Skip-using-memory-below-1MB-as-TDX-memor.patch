From 5f56f6974d31a34b1d98df0a269a48b07922cafc Mon Sep 17 00:00:00 2001
From: Kai Huang <kai.huang@intel.com>
Date: Tue, 28 Sep 2021 09:55:45 +1300
Subject: [PATCH 0319/1418] x86/cpu/tdx: Skip using memory below 1MB as TDX
 memory

Before constructing TDMRs to convert convertible memory as TDX memory,
kernel checks whether all TDX memory blocks are fully covered by BIOS
provided convertible memory regions (CMRs), and refuses to convert if
any is not.

The BIOS-generated CMRs won't contain memory below 1MB.  To avoid above
check failure, explicitly skip memory below 1MB as TDX memory block.
This is fine since memory below 1MB is already reserved in setup_arch(),
and won't be managed by page allocator anyway.

Signed-off-by: Kai Huang <kai.huang@intel.com>
Signed-off-by: Isaku Yamahata <isaku.yamahata@intel.com>
---
 arch/x86/kernel/cpu/tdx/tdmr-sysmem.c | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/arch/x86/kernel/cpu/tdx/tdmr-sysmem.c b/arch/x86/kernel/cpu/tdx/tdmr-sysmem.c
index f0077225f0c8..8c8042e1e6ba 100644
--- a/arch/x86/kernel/cpu/tdx/tdmr-sysmem.c
+++ b/arch/x86/kernel/cpu/tdx/tdmr-sysmem.c
@@ -5,6 +5,7 @@
 #define pr_fmt(fmt) "tdx: " fmt
 
 #include <linux/memblock.h>
+#include <linux/sizes.h>
 #include "tdmr-sysmem.h"
 
 /* TDX memory instance which contains all system memory blocks */
@@ -22,6 +23,24 @@ static int __init tdx_sysmem_add_block(struct tdx_memory *tmem,
 	struct tdx_memblock *tmb;
 	int ret;
 
+	/*
+	 * Before constructing TDMRs to convert convertible memory as TDX
+	 * memory, kernel checks whether all TDX memory blocks are fully
+	 * covered by BIOS provided convertible memory regions (CMRs),
+	 * and refuses to convert if any is not.
+	 *
+	 * The BIOS generated CMRs won't contain memory below 1MB.  To avoid
+	 * above check failure, explicitly skip memory below 1MB as TDX
+	 * memory block.  This is fine since memory below 1MB is already
+	 * reserved in setup_arch(), and won't be managed by page allocator
+	 * anyway.
+	 */
+	if (start_pfn < (SZ_1M >> PAGE_SHIFT))
+		start_pfn = (SZ_1M >> PAGE_SHIFT);
+
+	if (start_pfn >= end_pfn)
+		return 0;
+
 	tmb = tdx_memblock_create(start_pfn, end_pfn, nid, NULL, &sysmem_ops);
 	if (!tmb)
 		return -ENOMEM;
-- 
2.31.1

