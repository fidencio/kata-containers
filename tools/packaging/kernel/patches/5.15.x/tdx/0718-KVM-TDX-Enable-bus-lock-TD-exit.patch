From af80ffd5a2d88c8396457cb2ca2d6b874c5871fc Mon Sep 17 00:00:00 2001
From: Chenyi Qiang <chenyi.qiang@intel.com>
Date: Tue, 16 Nov 2021 14:29:49 +0800
Subject: [PATCH 0718/1418] KVM: TDX: Enable bus lock TD exit

This patch is to add the support for bus lock VM exit in TD guest. Since
legacy support is already in upstream, we can reuse some code in legacy
VM (e.g. check and enable the cap KVM_CAP_X86_BUS_LOCK_EXIT).

Signed-off-by: Chenyi Qiang <chenyi.qiang@intel.com>
---
 arch/x86/kvm/vmx/tdx.c | 33 ++++++++++++++++++++++++++++++++-
 arch/x86/kvm/vmx/tdx.h |  2 +-
 2 files changed, 33 insertions(+), 2 deletions(-)

diff --git a/arch/x86/kvm/vmx/tdx.c b/arch/x86/kvm/vmx/tdx.c
index b28f91910aac..522f60e97db4 100644
--- a/arch/x86/kvm/vmx/tdx.c
+++ b/arch/x86/kvm/vmx/tdx.c
@@ -1799,7 +1799,13 @@ static int tdx_handle_dr(struct kvm_vcpu *vcpu)
 	return vmx_handle_dr(vcpu);
 }
 
-static int tdx_handle_exit(struct kvm_vcpu *vcpu,
+static int tdx_handle_bus_lock_vmexit(struct kvm_vcpu *vcpu)
+{
+	to_tdx(vcpu)->exit_reason.bus_lock_detected = true;
+	return 1;
+}
+
+static int __tdx_handle_exit(struct kvm_vcpu *vcpu,
 			   enum exit_fastpath_completion fastpath)
 {
 	union tdx_exit_reason exit_reason = to_tdx(vcpu)->exit_reason;
@@ -1858,6 +1864,8 @@ static int tdx_handle_exit(struct kvm_vcpu *vcpu,
 		 * - If it's not an MSMI, don't need to do anything here.
 		 */
 		return 1;
+	case EXIT_REASON_BUS_LOCK:
+		return tdx_handle_bus_lock_vmexit(vcpu);
 	default:
 		break;
 	}
@@ -1868,6 +1876,24 @@ static int tdx_handle_exit(struct kvm_vcpu *vcpu,
 	return 0;
 }
 
+static int tdx_handle_exit(struct kvm_vcpu *vcpu, fastpath_t exit_fastpath)
+{
+	int ret = __tdx_handle_exit(vcpu, exit_fastpath);
+
+	/*
+	 * Exit to user space when bus lock detected to inform that there is
+	 * a bus lock in guest.
+	 */
+	if (to_tdx(vcpu)->exit_reason.bus_lock_detected) {
+		if (ret > 0)
+			vcpu->run->exit_reason = KVM_EXIT_X86_BUS_LOCK;
+
+		vcpu->run->flags |= KVM_RUN_X86_BUS_LOCK;
+		return 0;
+	}
+	return ret;
+}
+
 static void tdx_get_exit_info(struct kvm_vcpu *vcpu, u64 *info1, u64 *info2,
 			      u32 *intr_info, u32 *error_code)
 {
@@ -2385,6 +2411,11 @@ static int tdx_vcpu_ioctl(struct kvm_vcpu *vcpu, void __user *argp)
 		pr_info("Set DR access VMExit for debug enabled TD guest\n");
 	}
 
+	if (vcpu->kvm->arch.bus_lock_detection_enabled)
+		td_vmcs_setbit32(tdx,
+				 SECONDARY_VM_EXEC_CONTROL,
+				 SECONDARY_EXEC_BUS_LOCK_DETECTION);
+
 	return 0;
 }
 
diff --git a/arch/x86/kvm/vmx/tdx.h b/arch/x86/kvm/vmx/tdx.h
index beba9344ece8..3fbe3e7b60e8 100644
--- a/arch/x86/kvm/vmx/tdx.h
+++ b/arch/x86/kvm/vmx/tdx.h
@@ -54,7 +54,7 @@ union tdx_exit_reason {
 		u64 reserved23		: 1;
 		u64 reserved24		: 1;
 		u64 reserved25		: 1;
-		u64 reserved26		: 1;
+		u64 bus_lock_detected	: 1;
 		u64 enclave_mode	: 1;
 		u64 smi_pending_mtf	: 1;
 		u64 smi_from_vmx_root	: 1;
-- 
2.31.1

