From 4a45535550c087a797be7f794d2d758729105283 Mon Sep 17 00:00:00 2001
From: Yi Sun <yi.y.sun@linux.intel.com>
Date: Wed, 11 May 2022 22:28:38 +0800
Subject: [PATCH 1356/1418] kvm: Refine codes to make ABI compatible

Signed-off-by: Yi Sun <yi.y.sun@linux.intel.com>
---
 arch/x86/kvm/x86.c       | 30 ++++++++++++++++++++++++------
 include/uapi/linux/kvm.h |  5 +++--
 2 files changed, 27 insertions(+), 8 deletions(-)

diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 74ca68f94bf7..b8fa6fb13803 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -6906,7 +6906,11 @@ static int write_exit_mmio(struct kvm_vcpu *vcpu, gpa_t gpa,
 {
 	struct kvm_mmio_fragment *frag = &vcpu->mmio_fragments[0];
 
-	memcpy(vcpu->run->mmio.data, frag->data, min(64u, frag->len));
+	if (frag->len > 8) {
+		memcpy(vcpu->run->mmio.np_data, frag->data, min(64u, frag->len));
+	} else {
+		memcpy(vcpu->run->mmio.data, frag->data, min(8u, frag->len));
+	}
 	return X86EMUL_CONTINUE;
 }
 
@@ -10248,8 +10252,13 @@ static int complete_emulated_mmio(struct kvm_vcpu *vcpu)
 
 	run->exit_reason = KVM_EXIT_MMIO;
 	run->mmio.phys_addr = frag->gpa;
-	if (vcpu->mmio_is_write)
-		memcpy(run->mmio.data, frag->data, min(64u, frag->len));
+	if (vcpu->mmio_is_write) {
+		if (frag->len > 8) {
+			memcpy(run->mmio.np_data, frag->data, min(64u, frag->len));
+		} else {
+			memcpy(run->mmio.data, frag->data, min(8u, frag->len));
+		}
+	}
 	run->mmio.len = min(64u, frag->len);
 	run->mmio.is_write = vcpu->mmio_is_write;
 	vcpu->arch.complete_userspace_io = complete_emulated_mmio;
@@ -12660,8 +12669,13 @@ static int complete_sev_es_emulated_mmio(struct kvm_vcpu *vcpu)
 	run->mmio.phys_addr = frag->gpa;
 	run->mmio.len = min(64u, frag->len);
 	run->mmio.is_write = vcpu->mmio_is_write;
-	if (run->mmio.is_write)
-		memcpy(run->mmio.data, frag->data, min(64u, frag->len));
+	if (run->mmio.is_write) {
+		if (frag->len > 8) {
+			memcpy(run->mmio.np_data, frag->data, min(64u, frag->len));
+		} else {
+			memcpy(run->mmio.data, frag->data, min(8u, frag->len));
+		}
+	}
 	run->exit_reason = KVM_EXIT_MMIO;
 
 	vcpu->arch.complete_userspace_io = complete_sev_es_emulated_mmio;
@@ -12699,7 +12713,11 @@ int kvm_sev_es_mmio_write(struct kvm_vcpu *vcpu, gpa_t gpa, unsigned int bytes,
 	vcpu->run->mmio.phys_addr = gpa;
 	vcpu->run->mmio.len = min(64u, frag->len);
 	vcpu->run->mmio.is_write = 1;
-	memcpy(vcpu->run->mmio.data, frag->data, min(64u, frag->len));
+	if (frag->len > 8) {
+		memcpy(vcpu->run->mmio.np_data, frag->data, min(64u, frag->len));
+	} else {
+		memcpy(vcpu->run->mmio.data, frag->data, min(8u, frag->len));
+	}
 	vcpu->run->exit_reason = KVM_EXIT_MMIO;
 
 	vcpu->arch.complete_userspace_io = complete_sev_es_emulated_mmio;
diff --git a/include/uapi/linux/kvm.h b/include/uapi/linux/kvm.h
index d5e52d37f8a8..bd533e521ffb 100644
--- a/include/uapi/linux/kvm.h
+++ b/include/uapi/linux/kvm.h
@@ -394,9 +394,10 @@ struct kvm_run {
 		/* KVM_EXIT_MMIO */
 		struct {
 			__u64 phys_addr;
-			__u8  data[64];
+			__u8  data[8];
 			__u32 len;
 			__u8  is_write;
+			__u8  np_data[64];
 		} mmio;
 		/* KVM_EXIT_HYPERCALL */
 		struct {
@@ -569,7 +570,7 @@ struct kvm_coalesced_mmio {
 		__u32 pad;
 		__u32 pio;
 	};
-	__u8  data[64];
+	__u8  data[8];
 };
 
 struct kvm_coalesced_mmio_ring {
-- 
2.31.1

