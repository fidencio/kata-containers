From 16e35a57c49e50d6a669fceb2cdb760a9c02827f Mon Sep 17 00:00:00 2001
From: Yang Zhong <yang.zhong@intel.com>
Date: Mon, 24 Jan 2022 17:49:59 -0800
Subject: [PATCH 0928/1418] Revert "kvm: x86: Introduce kvm_xsave2 and ioctls"

This reverts commit e1cceace67f20c3c51fe5245eb0514b9552d1d78.
---
 arch/x86/include/uapi/asm/kvm.h |  6 ---
 arch/x86/kvm/x86.c              | 65 ---------------------------------
 include/uapi/linux/kvm.h        |  2 -
 3 files changed, 73 deletions(-)

diff --git a/arch/x86/include/uapi/asm/kvm.h b/arch/x86/include/uapi/asm/kvm.h
index 7002aaa1d236..b2e9c94a4eb3 100644
--- a/arch/x86/include/uapi/asm/kvm.h
+++ b/arch/x86/include/uapi/asm/kvm.h
@@ -378,12 +378,6 @@ struct kvm_xsave {
 	__u32 region[1024];
 };
 
-struct kvm_xsave2 {
-	__u32 flag;
-	__u32 size;
-	__u8 state[0];
-};
-
 #define KVM_MAX_XCRS	16
 
 struct kvm_xcr {
diff --git a/arch/x86/kvm/x86.c b/arch/x86/kvm/x86.c
index 871fafa78d89..95b09edaee06 100644
--- a/arch/x86/kvm/x86.c
+++ b/arch/x86/kvm/x86.c
@@ -5005,17 +5005,6 @@ static int kvm_vcpu_ioctl_x86_get_xsave(struct kvm_vcpu *vcpu,
 	return 0;
 }
 
-static void kvm_vcpu_ioctl_x86_get_xsave2(struct kvm_vcpu *vcpu,
-					  u8 *state, u32 size)
-{
-	if (fpstate_is_confidential(&vcpu->arch.guest_fpu))
-		return;
-
-	fpu_copy_guest_fpstate_to_uabi(&vcpu->arch.guest_fpu,
-				       state, size,
-				       vcpu->arch.pkru);
-}
-
 static int kvm_vcpu_ioctl_x86_set_xsave(struct kvm_vcpu *vcpu,
 					struct kvm_xsave *guest_xsave)
 {
@@ -5030,15 +5019,6 @@ static int kvm_vcpu_ioctl_x86_set_xsave(struct kvm_vcpu *vcpu,
 					      supported_xcr0, &vcpu->arch.pkru);
 }
 
-static int kvm_vcpu_ioctl_x86_set_xsave2(struct kvm_vcpu *vcpu, u8 *state)
-{
-	if (fpstate_is_confidential(&vcpu->arch.guest_fpu))
-		return 0;
-
-	return fpu_copy_uabi_to_guest_fpstate(&vcpu->arch.guest_fpu, state,
-					      supported_xcr0, &vcpu->arch.pkru);
-}
-
 static int kvm_vcpu_ioctl_x86_get_xcrs(struct kvm_vcpu *vcpu,
 				       struct kvm_xcrs *guest_xcrs)
 {
@@ -5388,51 +5368,6 @@ long kvm_arch_vcpu_ioctl(struct file *filp,
 		r = kvm_vcpu_ioctl_x86_set_xsave(vcpu, u.xsave);
 		break;
 	}
-	case KVM_GET_XSAVE2: {
-		struct kvm_xsave2 __user *xsave2_arg = argp;
-		struct kvm_xsave2 xsave2;
-		u8 *state;
-
-		r = -EFAULT;
-		if (copy_from_user(&xsave2, xsave2_arg, sizeof(struct kvm_xsave2)))
-			goto out;
-
-		state = kzalloc(xsave2.size, GFP_KERNEL_ACCOUNT);
-
-		r = -ENOMEM;
-		if (!state)
-			break;
-
-		kvm_vcpu_ioctl_x86_get_xsave2(vcpu, state, xsave2.size);
-
-		r = -EFAULT;
-		if (copy_to_user(xsave2_arg->state, state, xsave2.size))
-			goto out_free;
-
-		r = 0;
-out_free:
-		kfree(state);
-		break;
-	}
-	case KVM_SET_XSAVE2: {
-		struct kvm_xsave2 __user *xsave2_arg = argp;
-		struct kvm_xsave2 xsave2;
-		u8 *state;
-
-		r = -EFAULT;
-		if (copy_from_user(&xsave2, xsave2_arg, sizeof(struct kvm_xsave2)))
-			goto out;
-
-		state = memdup_user(xsave2_arg->state, xsave2.size);
-
-		r = -ENOMEM;
-		if (IS_ERR(state))
-			break;
-
-		r = kvm_vcpu_ioctl_x86_set_xsave2(vcpu, state);
-		kfree(state);
-		break;
-	}
 	case KVM_GET_XCRS: {
 		u.xcrs = kzalloc(sizeof(struct kvm_xcrs), GFP_KERNEL_ACCOUNT);
 		r = -ENOMEM;
diff --git a/include/uapi/linux/kvm.h b/include/uapi/linux/kvm.h
index 283503c86ca6..0eba5167f1fd 100644
--- a/include/uapi/linux/kvm.h
+++ b/include/uapi/linux/kvm.h
@@ -1596,8 +1596,6 @@ struct kvm_s390_ucas_mapping {
 /* Available with KVM_CAP_XSAVE */
 #define KVM_GET_XSAVE		  _IOR(KVMIO,  0xa4, struct kvm_xsave)
 #define KVM_SET_XSAVE		  _IOW(KVMIO,  0xa5, struct kvm_xsave)
-#define KVM_GET_XSAVE2		  _IOR(KVMIO,  0xcf, struct kvm_xsave2)
-#define KVM_SET_XSAVE2		  _IOW(KVMIO,  0xd0, struct kvm_xsave2)
 /* Available with KVM_CAP_XCRS */
 #define KVM_GET_XCRS		  _IOR(KVMIO,  0xa6, struct kvm_xcrs)
 #define KVM_SET_XCRS		  _IOW(KVMIO,  0xa7, struct kvm_xcrs)
-- 
2.31.1

